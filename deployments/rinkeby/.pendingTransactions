{
  "0xd379d61f1a307d0057e75800694128fd121fee02a24dd572fadcc1fb1cf06af1": {
    "name": "BCRAvatar",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "BCRAvatar",
      "sourceName": "contracts/BCRAvatar.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "avatarURI",
              "type": "string"
            }
          ],
          "name": "AvatarCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "avatarURI",
              "type": "string"
            }
          ],
          "name": "AvatarUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "avatarURI",
              "type": "string"
            }
          ],
          "name": "ContractAvatarCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "avatarURI",
              "type": "string"
            }
          ],
          "name": "ContractAvatarUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "profileURI",
              "type": "string"
            }
          ],
          "name": "ContractProfileCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "profileURI",
              "type": "string"
            }
          ],
          "name": "ContractProfileUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "NFTDeRegistered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "NFTRegistered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "profileURI",
              "type": "string"
            }
          ],
          "name": "ProfileCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "profileURI",
              "type": "string"
            }
          ],
          "name": "ProfileUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "ServiceDonated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "avatarNFTs",
          "outputs": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isERC721",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "contracts",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "deRegisterNFT",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "donate",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "getAvatar",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "getProfile",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isERC721",
              "type": "bool"
            }
          ],
          "name": "registerNFT",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "avatarHash",
              "type": "string"
            }
          ],
          "name": "setAvatar",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "avatarHash",
              "type": "string"
            }
          ],
          "name": "setContractAvatar",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "profileHash",
              "type": "string"
            }
          ],
          "name": "setContractProfile",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "avatarHash",
              "type": "string"
            }
          ],
          "name": "setOwnableContractAvatar",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "profileHash",
              "type": "string"
            }
          ],
          "name": "setOwnableContractProfile",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "profileHash",
              "type": "string"
            }
          ],
          "name": "setProfile",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60c0604052601560808190527f68747470733a2f2f697066732e696f2f697066732f000000000000000000000060a090815262000040916006919062000144565b503480156200004e57600080fd5b506040518060400160405280601c81526020017f426c6f636b636861696e20526567697374657265642041766174617200000000815250604051806040016040528060048152602001634243524160e01b815250620000bc620000b6620000f060201b60201c565b620000f4565b8151620000d190600490602085019062000144565b508051620000e790600590602084019062000144565b50505062000227565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200015290620001ea565b90600052602060002090601f016020900481019282620001765760008555620001c1565b82601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b5b80821115620001cf5760008155600101620001d4565b600181811c90821680620001ff57607f821691505b602082108114156200022157634e487b7160e01b600052602260045260246000fd5b50919050565b611f8880620002376000396000f3fe6080604052600436106101c25760003560e01c80636ec5239f116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610551578063ed88c68e14610597578063f2fde38b1461059f578063fd4485b9146105bf57600080fd5b8063a9059cbb146104d1578063ce8ac033146104f1578063dbd1838314610511578063dc0d75b01461053157600080fd5b806385f75293116100d157806385f75293146104045780638da5cb5b1461047457806395d89b411461049c578063a457c2d7146104b157600080fd5b80636ec5239f1461039957806370a08231146103b9578063715018a6146103ef57600080fd5b8063313ce5671161016457806364635ebc1161013e57806364635ebc14610314578063680563061461033457806369dc9ff3146103545780636c0360eb1461038457600080fd5b8063313ce567146102c357806339509351146102df5780633ccfd60b146102ff57600080fd5b80631587fb27116101a05780631587fb271461024257806318160ddd14610264578063235b37b11461028357806323b872dd146102a357600080fd5b806306fdde03146101c7578063095ea7b3146101f25780630f53a47014610222575b600080fd5b3480156101d357600080fd5b506101dc6105d4565b6040516101e99190611db4565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611bd9565b610666565b60405190151581526020016101e9565b34801561022e57600080fd5b506101dc61023d366004611ad4565b61067c565b34801561024e57600080fd5b5061026261025d366004611b8b565b610703565b005b34801561027057600080fd5b506003545b6040519081526020016101e9565b34801561028f57600080fd5b5061026261029e366004611c49565b61086c565b3480156102af57600080fd5b506102126102be366004611b4b565b610923565b3480156102cf57600080fd5b50604051601281526020016101e9565b3480156102eb57600080fd5b506102126102fa366004611bd9565b6109cd565b34801561030b57600080fd5b50610262610a09565b34801561032057600080fd5b5061026261032f366004611b8b565b610ab6565b34801561034057600080fd5b5061026261034f366004611b8b565b610bfc565b34801561036057600080fd5b5061021261036f366004611ad4565b600b6020526000908152604090205460ff1681565b34801561039057600080fd5b506101dc610c9d565b3480156103a557600080fd5b506102626103b4366004611c49565b610d2b565b3480156103c557600080fd5b506102756103d4366004611ad4565b6001600160a01b031660009081526001602052604090205490565b3480156103fb57600080fd5b50610262610dc9565b34801561041057600080fd5b5061044d61041f366004611ad4565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060016101e9565b34801561048057600080fd5b506000546040516001600160a01b0390911681526020016101e9565b3480156104a857600080fd5b506101dc610dff565b3480156104bd57600080fd5b506102126104cc366004611bd9565b610e0e565b3480156104dd57600080fd5b506102126104ec366004611bd9565b610ea7565b3480156104fd57600080fd5b506101dc61050c366004611ad4565b610eb4565b34801561051d57600080fd5b5061026261052c366004611c04565b61112e565b34801561053d57600080fd5b5061026261054c366004611b8b565b611330565b34801561055d57600080fd5b5061027561056c366004611b13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102626113d1565b3480156105ab57600080fd5b506102626105ba366004611ad4565b61147e565b3480156105cb57600080fd5b50610262611516565b6060600480546105e390611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90611eec565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b60006106733384846115c7565b50600192915050565b6001600160a01b0381166000908152600960205260408120805460609291906106a490611eec565b905011156106ef576001600160a01b03821660009081526009602090815260409182902091516106d992600692909101611d9f565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b6000546001600160a01b031633146107365760405162461bcd60e51b815260040161072d90611e0e565b60405180910390fd5b813b6107775760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b0382166000908152600960205260408120805461079a90611eec565b6001600160a01b03851660009081526009602090815260409091208551921594506107ca935091908501906119ea565b508015610838576001600160a01b0383166000818152600b60205260409020805460ff191660011790557f9f744f09fc8f1197f6533ba42aab750ccb8047c53da4f27410422b2fc872b99661081e8561067c565b60405161082b9190611db4565b60405180910390a2505050565b826001600160a01b03167febf2a104a1845e326777e9ef4e98f6f40343903564ffbce0586cbca9cd8926c561081e8561067c565b336000908152600960205260408120805461088690611eec565b3360009081526009602090815260409091208551921594506108ad935091908501906119ea565b5080156108f857337fbafddecbd1dec1c1afb76d693f1de16901f521bdf29a02438e3e6806c0b8d9486108df8261067c565b6040516108ec9190611db4565b60405180910390a25050565b337fdd635a4cd84864e37e4479dbfc2ec667acfa473c83c8422a8ac9d9d07599b01c6108df8261067c565b60006109308484846116eb565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156109b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161072d565b6109c285338584036115c7565b506001949350505050565b3360008181526002602090815260408083206001600160a01b03871684529091528120549091610673918590610a04908690611e9c565b6115c7565b6000546001600160a01b03163314610a335760405162461bcd60e51b815260040161072d90611e0e565b60004711610a795760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d081a5b9cdd59999a58da595b9d606a1b604482015260640161072d565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610ab3573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610ae05760405162461bcd60e51b815260040161072d90611e0e565b813b610b215760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b03821660009081526008602052604081208054610b4490611eec565b6001600160a01b0385166000908152600860209081526040909120855192159450610b74935091908501906119ea565b508015610bc8576001600160a01b0383166000818152600b60205260409020805460ff191660011790557fa11242986e21965d8f93d5f585311fc31dbc4ef21c5dc092c793f9eebbc3597761081e85610eb4565b826001600160a01b03167f796eb690fa486af3224f8119f41c63fdf33965351be20231aae6f2ede7233b4361081e85610eb4565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190611af7565b6001600160a01b031614610b215760405162461bcd60e51b815260040161072d90611de7565b60068054610caa90611eec565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd690611eec565b8015610d235780601f10610cf857610100808354040283529160200191610d23565b820191906000526020600020905b815481529060010190602001808311610d0657829003601f168201915b505050505081565b3360009081526008602052604081208054610d4590611eec565b336000908152600860209081526040909120855192159450610d6c935091908501906119ea565b508015610d9e57337f713b884fa85d657dab3084902090821951d956678e51a03b2a550a0a39c063f36108df82610eb4565b337fed6fbee54fb754678a908527ed51cf00840e56cca6b00760c99382dccf6866f96108df82610eb4565b6000546001600160a01b03163314610df35760405162461bcd60e51b815260040161072d90611e0e565b610dfd60006118bb565b565b6060600580546105e390611eec565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610e905760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161072d565b610e9d33858584036115c7565b5060019392505050565b60006106733384846116eb565b6001600160a01b038181166000908152600a602052604090205460609116156110d6576001600160a01b038083166000908152600a602052604090208054600182015460029092015492169160ff161561101e576040516331a9108f60e11b8152600481018290526001600160a01b038086169190841690636352211e9060240160206040518083038186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190611af7565b6001600160a01b031614156110195760405163c87b56dd60e01b8152600481018290526001600160a01b0383169063c87b56dd906024015b60006040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110119190810190611c7c565b949350505050565b6110d3565b604051627eeac760e11b81526001600160a01b038581166004830152602482018390526000919084169062fdd58e9060440160206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190611cef565b11156110d3576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401610fbd565b50505b6001600160a01b038216600090815260086020526040812080546110f990611eec565b905011156106ef576001600160a01b03821660009081526008602090815260409182902091516106d992600692909101611d9f565b80156111d9576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae9190611af7565b6001600160a01b0316146111d45760405162461bcd60e51b815260040161072d90611de7565b61129c565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611cef565b1161129c5760405162461bcd60e51b815260206004820152601460248201527310985b185b98d9481a5b9cdd59999a58da595b9d60621b604482015260640161072d565b604080516060810182526001600160a01b0385811682526020808301868152851515848601908152336000818152600a909452868420955186546001600160a01b031916951694909417855590516001850155516002909301805460ff19169315159390931790925591517febbf08e0c6f72650cd47fd7a287defcf3b872b6c42d317a2a7a86ec62e394ffd9190a2505050565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611af7565b6001600160a01b0316146107775760405162461bcd60e51b815260040161072d90611de7565b600034116114195760405162461bcd60e51b8152602060048201526015602482015274111bdb985d1a5bdb881a5b9cdd59999a58da595b9d605a1b604482015260640161072d565b611423333461190b565b3360009081526007602052604081208054349290611442908490611e9c565b909155505060405134815233907f468bb967b2a541c62b036ff215eec60aeec51236016d6250a405472a36d4edec9060200160405180910390a2565b6000546001600160a01b031633146114a85760405162461bcd60e51b815260040161072d90611e0e565b6001600160a01b03811661150d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072d565b610ab3816118bb565b336000908152600a60205260409020546001600160a01b03166115705760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161072d565b336000818152600a602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fb63279298e3ac7072c4faab7d32ee749119d951fc3d598b92bd9640546a543d19190a2565b6001600160a01b0383166116295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161072d565b6001600160a01b03821661168a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161072d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661174f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161072d565b6001600160a01b0382166117b15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161072d565b6001600160a01b038316600090815260016020526040902054818110156118295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161072d565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290611860908490611e9c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118ac91815260200190565b60405180910390a35b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166119615760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161072d565b80600360008282546119739190611e9c565b90915550506001600160a01b038216600090815260016020526040812080548392906119a0908490611e9c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546119f690611eec565b90600052602060002090601f016020900481019282611a185760008555611a5e565b82601f10611a3157805160ff1916838001178555611a5e565b82800160010185558215611a5e579182015b82811115611a5e578251825591602001919060010190611a43565b50611a6a929150611a6e565b5090565b5b80821115611a6a5760008155600101611a6f565b600082601f830112611a93578081fd5b8135611aa6611aa182611e74565b611e43565b818152846020838601011115611aba578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611ae5578081fd5b8135611af081611f3d565b9392505050565b600060208284031215611b08578081fd5b8151611af081611f3d565b60008060408385031215611b25578081fd5b8235611b3081611f3d565b91506020830135611b4081611f3d565b809150509250929050565b600080600060608486031215611b5f578081fd5b8335611b6a81611f3d565b92506020840135611b7a81611f3d565b929592945050506040919091013590565b60008060408385031215611b9d578182fd5b8235611ba881611f3d565b9150602083013567ffffffffffffffff811115611bc3578182fd5b611bcf85828601611a83565b9150509250929050565b60008060408385031215611beb578182fd5b8235611bf681611f3d565b946020939093013593505050565b600080600060608486031215611c18578283fd5b8335611c2381611f3d565b92506020840135915060408401358015158114611c3e578182fd5b809150509250925092565b600060208284031215611c5a578081fd5b813567ffffffffffffffff811115611c70578182fd5b61101184828501611a83565b600060208284031215611c8d578081fd5b815167ffffffffffffffff811115611ca3578182fd5b8201601f81018413611cb3578182fd5b8051611cc1611aa182611e74565b818152856020838501011115611cd5578384fd5b611ce6826020830160208601611ec0565b95945050505050565b600060208284031215611d00578081fd5b5051919050565b8054600090600181811c9080831680611d2157607f831692505b6020808410821415611d4157634e487b7160e01b86526022600452602486fd5b818015611d555760018114611d6657611d93565b60ff19861689528489019650611d93565b60008881526020902060005b86811015611d8b5781548b820152908501908301611d72565b505084890196505b50505050505092915050565b6000611011611dae8386611d07565b84611d07565b6020815260008251806020840152611dd3816040850160208701611ec0565b601f01601f19169190910160400192915050565b6020808252600d908201526c13dddb995c881a5b9d985b1a59609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6c57611e6c611f27565b604052919050565b600067ffffffffffffffff821115611e8e57611e8e611f27565b50601f01601f191660200190565b60008219821115611ebb57634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015611edb578181015183820152602001611ec3565b838111156118b55750506000910152565b600181811c90821680611f0057607f821691505b60208210811415611f2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab357600080fdfea2646970667358221220979c3dd99cf012b7451adc3169bfb05b22174922d388e1f40fa0dea4abcf5ac864736f6c63430008040033",
      "deployedBytecode": "0x6080604052600436106101c25760003560e01c80636ec5239f116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610551578063ed88c68e14610597578063f2fde38b1461059f578063fd4485b9146105bf57600080fd5b8063a9059cbb146104d1578063ce8ac033146104f1578063dbd1838314610511578063dc0d75b01461053157600080fd5b806385f75293116100d157806385f75293146104045780638da5cb5b1461047457806395d89b411461049c578063a457c2d7146104b157600080fd5b80636ec5239f1461039957806370a08231146103b9578063715018a6146103ef57600080fd5b8063313ce5671161016457806364635ebc1161013e57806364635ebc14610314578063680563061461033457806369dc9ff3146103545780636c0360eb1461038457600080fd5b8063313ce567146102c357806339509351146102df5780633ccfd60b146102ff57600080fd5b80631587fb27116101a05780631587fb271461024257806318160ddd14610264578063235b37b11461028357806323b872dd146102a357600080fd5b806306fdde03146101c7578063095ea7b3146101f25780630f53a47014610222575b600080fd5b3480156101d357600080fd5b506101dc6105d4565b6040516101e99190611db4565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611bd9565b610666565b60405190151581526020016101e9565b34801561022e57600080fd5b506101dc61023d366004611ad4565b61067c565b34801561024e57600080fd5b5061026261025d366004611b8b565b610703565b005b34801561027057600080fd5b506003545b6040519081526020016101e9565b34801561028f57600080fd5b5061026261029e366004611c49565b61086c565b3480156102af57600080fd5b506102126102be366004611b4b565b610923565b3480156102cf57600080fd5b50604051601281526020016101e9565b3480156102eb57600080fd5b506102126102fa366004611bd9565b6109cd565b34801561030b57600080fd5b50610262610a09565b34801561032057600080fd5b5061026261032f366004611b8b565b610ab6565b34801561034057600080fd5b5061026261034f366004611b8b565b610bfc565b34801561036057600080fd5b5061021261036f366004611ad4565b600b6020526000908152604090205460ff1681565b34801561039057600080fd5b506101dc610c9d565b3480156103a557600080fd5b506102626103b4366004611c49565b610d2b565b3480156103c557600080fd5b506102756103d4366004611ad4565b6001600160a01b031660009081526001602052604090205490565b3480156103fb57600080fd5b50610262610dc9565b34801561041057600080fd5b5061044d61041f366004611ad4565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060016101e9565b34801561048057600080fd5b506000546040516001600160a01b0390911681526020016101e9565b3480156104a857600080fd5b506101dc610dff565b3480156104bd57600080fd5b506102126104cc366004611bd9565b610e0e565b3480156104dd57600080fd5b506102126104ec366004611bd9565b610ea7565b3480156104fd57600080fd5b506101dc61050c366004611ad4565b610eb4565b34801561051d57600080fd5b5061026261052c366004611c04565b61112e565b34801561053d57600080fd5b5061026261054c366004611b8b565b611330565b34801561055d57600080fd5b5061027561056c366004611b13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102626113d1565b3480156105ab57600080fd5b506102626105ba366004611ad4565b61147e565b3480156105cb57600080fd5b50610262611516565b6060600480546105e390611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90611eec565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b60006106733384846115c7565b50600192915050565b6001600160a01b0381166000908152600960205260408120805460609291906106a490611eec565b905011156106ef576001600160a01b03821660009081526009602090815260409182902091516106d992600692909101611d9f565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b6000546001600160a01b031633146107365760405162461bcd60e51b815260040161072d90611e0e565b60405180910390fd5b813b6107775760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b0382166000908152600960205260408120805461079a90611eec565b6001600160a01b03851660009081526009602090815260409091208551921594506107ca935091908501906119ea565b508015610838576001600160a01b0383166000818152600b60205260409020805460ff191660011790557f9f744f09fc8f1197f6533ba42aab750ccb8047c53da4f27410422b2fc872b99661081e8561067c565b60405161082b9190611db4565b60405180910390a2505050565b826001600160a01b03167febf2a104a1845e326777e9ef4e98f6f40343903564ffbce0586cbca9cd8926c561081e8561067c565b336000908152600960205260408120805461088690611eec565b3360009081526009602090815260409091208551921594506108ad935091908501906119ea565b5080156108f857337fbafddecbd1dec1c1afb76d693f1de16901f521bdf29a02438e3e6806c0b8d9486108df8261067c565b6040516108ec9190611db4565b60405180910390a25050565b337fdd635a4cd84864e37e4479dbfc2ec667acfa473c83c8422a8ac9d9d07599b01c6108df8261067c565b60006109308484846116eb565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156109b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161072d565b6109c285338584036115c7565b506001949350505050565b3360008181526002602090815260408083206001600160a01b03871684529091528120549091610673918590610a04908690611e9c565b6115c7565b6000546001600160a01b03163314610a335760405162461bcd60e51b815260040161072d90611e0e565b60004711610a795760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d081a5b9cdd59999a58da595b9d606a1b604482015260640161072d565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610ab3573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610ae05760405162461bcd60e51b815260040161072d90611e0e565b813b610b215760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b03821660009081526008602052604081208054610b4490611eec565b6001600160a01b0385166000908152600860209081526040909120855192159450610b74935091908501906119ea565b508015610bc8576001600160a01b0383166000818152600b60205260409020805460ff191660011790557fa11242986e21965d8f93d5f585311fc31dbc4ef21c5dc092c793f9eebbc3597761081e85610eb4565b826001600160a01b03167f796eb690fa486af3224f8119f41c63fdf33965351be20231aae6f2ede7233b4361081e85610eb4565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190611af7565b6001600160a01b031614610b215760405162461bcd60e51b815260040161072d90611de7565b60068054610caa90611eec565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd690611eec565b8015610d235780601f10610cf857610100808354040283529160200191610d23565b820191906000526020600020905b815481529060010190602001808311610d0657829003601f168201915b505050505081565b3360009081526008602052604081208054610d4590611eec565b336000908152600860209081526040909120855192159450610d6c935091908501906119ea565b508015610d9e57337f713b884fa85d657dab3084902090821951d956678e51a03b2a550a0a39c063f36108df82610eb4565b337fed6fbee54fb754678a908527ed51cf00840e56cca6b00760c99382dccf6866f96108df82610eb4565b6000546001600160a01b03163314610df35760405162461bcd60e51b815260040161072d90611e0e565b610dfd60006118bb565b565b6060600580546105e390611eec565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610e905760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161072d565b610e9d33858584036115c7565b5060019392505050565b60006106733384846116eb565b6001600160a01b038181166000908152600a602052604090205460609116156110d6576001600160a01b038083166000908152600a602052604090208054600182015460029092015492169160ff161561101e576040516331a9108f60e11b8152600481018290526001600160a01b038086169190841690636352211e9060240160206040518083038186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190611af7565b6001600160a01b031614156110195760405163c87b56dd60e01b8152600481018290526001600160a01b0383169063c87b56dd906024015b60006040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110119190810190611c7c565b949350505050565b6110d3565b604051627eeac760e11b81526001600160a01b038581166004830152602482018390526000919084169062fdd58e9060440160206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190611cef565b11156110d3576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401610fbd565b50505b6001600160a01b038216600090815260086020526040812080546110f990611eec565b905011156106ef576001600160a01b03821660009081526008602090815260409182902091516106d992600692909101611d9f565b80156111d9576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae9190611af7565b6001600160a01b0316146111d45760405162461bcd60e51b815260040161072d90611de7565b61129c565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611cef565b1161129c5760405162461bcd60e51b815260206004820152601460248201527310985b185b98d9481a5b9cdd59999a58da595b9d60621b604482015260640161072d565b604080516060810182526001600160a01b0385811682526020808301868152851515848601908152336000818152600a909452868420955186546001600160a01b031916951694909417855590516001850155516002909301805460ff19169315159390931790925591517febbf08e0c6f72650cd47fd7a287defcf3b872b6c42d317a2a7a86ec62e394ffd9190a2505050565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611af7565b6001600160a01b0316146107775760405162461bcd60e51b815260040161072d90611de7565b600034116114195760405162461bcd60e51b8152602060048201526015602482015274111bdb985d1a5bdb881a5b9cdd59999a58da595b9d605a1b604482015260640161072d565b611423333461190b565b3360009081526007602052604081208054349290611442908490611e9c565b909155505060405134815233907f468bb967b2a541c62b036ff215eec60aeec51236016d6250a405472a36d4edec9060200160405180910390a2565b6000546001600160a01b031633146114a85760405162461bcd60e51b815260040161072d90611e0e565b6001600160a01b03811661150d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072d565b610ab3816118bb565b336000908152600a60205260409020546001600160a01b03166115705760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161072d565b336000818152600a602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fb63279298e3ac7072c4faab7d32ee749119d951fc3d598b92bd9640546a543d19190a2565b6001600160a01b0383166116295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161072d565b6001600160a01b03821661168a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161072d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661174f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161072d565b6001600160a01b0382166117b15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161072d565b6001600160a01b038316600090815260016020526040902054818110156118295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161072d565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290611860908490611e9c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118ac91815260200190565b60405180910390a35b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166119615760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161072d565b80600360008282546119739190611e9c565b90915550506001600160a01b038216600090815260016020526040812080548392906119a0908490611e9c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546119f690611eec565b90600052602060002090601f016020900481019282611a185760008555611a5e565b82601f10611a3157805160ff1916838001178555611a5e565b82800160010185558215611a5e579182015b82811115611a5e578251825591602001919060010190611a43565b50611a6a929150611a6e565b5090565b5b80821115611a6a5760008155600101611a6f565b600082601f830112611a93578081fd5b8135611aa6611aa182611e74565b611e43565b818152846020838601011115611aba578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611ae5578081fd5b8135611af081611f3d565b9392505050565b600060208284031215611b08578081fd5b8151611af081611f3d565b60008060408385031215611b25578081fd5b8235611b3081611f3d565b91506020830135611b4081611f3d565b809150509250929050565b600080600060608486031215611b5f578081fd5b8335611b6a81611f3d565b92506020840135611b7a81611f3d565b929592945050506040919091013590565b60008060408385031215611b9d578182fd5b8235611ba881611f3d565b9150602083013567ffffffffffffffff811115611bc3578182fd5b611bcf85828601611a83565b9150509250929050565b60008060408385031215611beb578182fd5b8235611bf681611f3d565b946020939093013593505050565b600080600060608486031215611c18578283fd5b8335611c2381611f3d565b92506020840135915060408401358015158114611c3e578182fd5b809150509250925092565b600060208284031215611c5a578081fd5b813567ffffffffffffffff811115611c70578182fd5b61101184828501611a83565b600060208284031215611c8d578081fd5b815167ffffffffffffffff811115611ca3578182fd5b8201601f81018413611cb3578182fd5b8051611cc1611aa182611e74565b818152856020838501011115611cd5578384fd5b611ce6826020830160208601611ec0565b95945050505050565b600060208284031215611d00578081fd5b5051919050565b8054600090600181811c9080831680611d2157607f831692505b6020808410821415611d4157634e487b7160e01b86526022600452602486fd5b818015611d555760018114611d6657611d93565b60ff19861689528489019650611d93565b60008881526020902060005b86811015611d8b5781548b820152908501908301611d72565b505084890196505b50505050505092915050565b6000611011611dae8386611d07565b84611d07565b6020815260008251806020840152611dd3816040850160208701611ec0565b601f01601f19169190910160400192915050565b6020808252600d908201526c13dddb995c881a5b9d985b1a59609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6c57611e6c611f27565b604052919050565b600067ffffffffffffffff821115611e8e57611e8e611f27565b50601f01601f191660200190565b60008219821115611ebb57634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015611edb578181015183820152602001611ec3565b838111156118b55750506000910152565b600181811c90821680611f0057607f821691505b60208210811415611f2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab357600080fdfea2646970667358221220979c3dd99cf012b7451adc3169bfb05b22174922d388e1f40fa0dea4abcf5ac864736f6c63430008040033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:396:22",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:22",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "69:325:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "79:22:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "93:1:22",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "96:4:22"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "89:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "89:12:22"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "79:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "110:38:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "140:4:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "146:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "136:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "136:12:22"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "114:18:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "187:31:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "189:27:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "203:6:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "211:4:22",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "199:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "199:17:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "189:6:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "167:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "160:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "160:26:22"
                          },
                          "nodeType": "YulIf",
                          "src": "157:2:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "277:111:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "298:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "305:3:22",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "310:10:22",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "301:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "301:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "291:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "291:31:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "291:31:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "342:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "345:4:22",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "335:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "335:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "335:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "370:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "373:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "363:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "363:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "363:15:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "233:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "256:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "264:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "253:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "253:14:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "230:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "230:38:22"
                          },
                          "nodeType": "YulIf",
                          "src": "227:2:22"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "49:4:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "58:6:22",
                        "type": ""
                      }
                    ],
                    "src": "14:380:22"
                  }
                ]
              },
              "contents": "{\n    { }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 22,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60c0604052601560808190527f68747470733a2f2f697066732e696f2f697066732f000000000000000000000060a090815262000040916006919062000144565b503480156200004e57600080fd5b506040518060400160405280601c81526020017f426c6f636b636861696e20526567697374657265642041766174617200000000815250604051806040016040528060048152602001634243524160e01b815250620000bc620000b6620000f060201b60201c565b620000f4565b8151620000d190600490602085019062000144565b508051620000e790600590602084019062000144565b50505062000227565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200015290620001ea565b90600052602060002090601f016020900481019282620001765760008555620001c1565b82601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b5b80821115620001cf5760008155600101620001d4565b600181811c90821680620001ff57607f821691505b602082108114156200022157634e487b7160e01b600052602260045260246000fd5b50919050565b611f8880620002376000396000f3fe6080604052600436106101c25760003560e01c80636ec5239f116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610551578063ed88c68e14610597578063f2fde38b1461059f578063fd4485b9146105bf57600080fd5b8063a9059cbb146104d1578063ce8ac033146104f1578063dbd1838314610511578063dc0d75b01461053157600080fd5b806385f75293116100d157806385f75293146104045780638da5cb5b1461047457806395d89b411461049c578063a457c2d7146104b157600080fd5b80636ec5239f1461039957806370a08231146103b9578063715018a6146103ef57600080fd5b8063313ce5671161016457806364635ebc1161013e57806364635ebc14610314578063680563061461033457806369dc9ff3146103545780636c0360eb1461038457600080fd5b8063313ce567146102c357806339509351146102df5780633ccfd60b146102ff57600080fd5b80631587fb27116101a05780631587fb271461024257806318160ddd14610264578063235b37b11461028357806323b872dd146102a357600080fd5b806306fdde03146101c7578063095ea7b3146101f25780630f53a47014610222575b600080fd5b3480156101d357600080fd5b506101dc6105d4565b6040516101e99190611db4565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611bd9565b610666565b60405190151581526020016101e9565b34801561022e57600080fd5b506101dc61023d366004611ad4565b61067c565b34801561024e57600080fd5b5061026261025d366004611b8b565b610703565b005b34801561027057600080fd5b506003545b6040519081526020016101e9565b34801561028f57600080fd5b5061026261029e366004611c49565b61086c565b3480156102af57600080fd5b506102126102be366004611b4b565b610923565b3480156102cf57600080fd5b50604051601281526020016101e9565b3480156102eb57600080fd5b506102126102fa366004611bd9565b6109cd565b34801561030b57600080fd5b50610262610a09565b34801561032057600080fd5b5061026261032f366004611b8b565b610ab6565b34801561034057600080fd5b5061026261034f366004611b8b565b610bfc565b34801561036057600080fd5b5061021261036f366004611ad4565b600b6020526000908152604090205460ff1681565b34801561039057600080fd5b506101dc610c9d565b3480156103a557600080fd5b506102626103b4366004611c49565b610d2b565b3480156103c557600080fd5b506102756103d4366004611ad4565b6001600160a01b031660009081526001602052604090205490565b3480156103fb57600080fd5b50610262610dc9565b34801561041057600080fd5b5061044d61041f366004611ad4565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060016101e9565b34801561048057600080fd5b506000546040516001600160a01b0390911681526020016101e9565b3480156104a857600080fd5b506101dc610dff565b3480156104bd57600080fd5b506102126104cc366004611bd9565b610e0e565b3480156104dd57600080fd5b506102126104ec366004611bd9565b610ea7565b3480156104fd57600080fd5b506101dc61050c366004611ad4565b610eb4565b34801561051d57600080fd5b5061026261052c366004611c04565b61112e565b34801561053d57600080fd5b5061026261054c366004611b8b565b611330565b34801561055d57600080fd5b5061027561056c366004611b13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102626113d1565b3480156105ab57600080fd5b506102626105ba366004611ad4565b61147e565b3480156105cb57600080fd5b50610262611516565b6060600480546105e390611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90611eec565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b60006106733384846115c7565b50600192915050565b6001600160a01b0381166000908152600960205260408120805460609291906106a490611eec565b905011156106ef576001600160a01b03821660009081526009602090815260409182902091516106d992600692909101611d9f565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b6000546001600160a01b031633146107365760405162461bcd60e51b815260040161072d90611e0e565b60405180910390fd5b813b6107775760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b0382166000908152600960205260408120805461079a90611eec565b6001600160a01b03851660009081526009602090815260409091208551921594506107ca935091908501906119ea565b508015610838576001600160a01b0383166000818152600b60205260409020805460ff191660011790557f9f744f09fc8f1197f6533ba42aab750ccb8047c53da4f27410422b2fc872b99661081e8561067c565b60405161082b9190611db4565b60405180910390a2505050565b826001600160a01b03167febf2a104a1845e326777e9ef4e98f6f40343903564ffbce0586cbca9cd8926c561081e8561067c565b336000908152600960205260408120805461088690611eec565b3360009081526009602090815260409091208551921594506108ad935091908501906119ea565b5080156108f857337fbafddecbd1dec1c1afb76d693f1de16901f521bdf29a02438e3e6806c0b8d9486108df8261067c565b6040516108ec9190611db4565b60405180910390a25050565b337fdd635a4cd84864e37e4479dbfc2ec667acfa473c83c8422a8ac9d9d07599b01c6108df8261067c565b60006109308484846116eb565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156109b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161072d565b6109c285338584036115c7565b506001949350505050565b3360008181526002602090815260408083206001600160a01b03871684529091528120549091610673918590610a04908690611e9c565b6115c7565b6000546001600160a01b03163314610a335760405162461bcd60e51b815260040161072d90611e0e565b60004711610a795760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d081a5b9cdd59999a58da595b9d606a1b604482015260640161072d565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610ab3573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610ae05760405162461bcd60e51b815260040161072d90611e0e565b813b610b215760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b03821660009081526008602052604081208054610b4490611eec565b6001600160a01b0385166000908152600860209081526040909120855192159450610b74935091908501906119ea565b508015610bc8576001600160a01b0383166000818152600b60205260409020805460ff191660011790557fa11242986e21965d8f93d5f585311fc31dbc4ef21c5dc092c793f9eebbc3597761081e85610eb4565b826001600160a01b03167f796eb690fa486af3224f8119f41c63fdf33965351be20231aae6f2ede7233b4361081e85610eb4565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190611af7565b6001600160a01b031614610b215760405162461bcd60e51b815260040161072d90611de7565b60068054610caa90611eec565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd690611eec565b8015610d235780601f10610cf857610100808354040283529160200191610d23565b820191906000526020600020905b815481529060010190602001808311610d0657829003601f168201915b505050505081565b3360009081526008602052604081208054610d4590611eec565b336000908152600860209081526040909120855192159450610d6c935091908501906119ea565b508015610d9e57337f713b884fa85d657dab3084902090821951d956678e51a03b2a550a0a39c063f36108df82610eb4565b337fed6fbee54fb754678a908527ed51cf00840e56cca6b00760c99382dccf6866f96108df82610eb4565b6000546001600160a01b03163314610df35760405162461bcd60e51b815260040161072d90611e0e565b610dfd60006118bb565b565b6060600580546105e390611eec565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610e905760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161072d565b610e9d33858584036115c7565b5060019392505050565b60006106733384846116eb565b6001600160a01b038181166000908152600a602052604090205460609116156110d6576001600160a01b038083166000908152600a602052604090208054600182015460029092015492169160ff161561101e576040516331a9108f60e11b8152600481018290526001600160a01b038086169190841690636352211e9060240160206040518083038186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190611af7565b6001600160a01b031614156110195760405163c87b56dd60e01b8152600481018290526001600160a01b0383169063c87b56dd906024015b60006040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110119190810190611c7c565b949350505050565b6110d3565b604051627eeac760e11b81526001600160a01b038581166004830152602482018390526000919084169062fdd58e9060440160206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190611cef565b11156110d3576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401610fbd565b50505b6001600160a01b038216600090815260086020526040812080546110f990611eec565b905011156106ef576001600160a01b03821660009081526008602090815260409182902091516106d992600692909101611d9f565b80156111d9576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae9190611af7565b6001600160a01b0316146111d45760405162461bcd60e51b815260040161072d90611de7565b61129c565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611cef565b1161129c5760405162461bcd60e51b815260206004820152601460248201527310985b185b98d9481a5b9cdd59999a58da595b9d60621b604482015260640161072d565b604080516060810182526001600160a01b0385811682526020808301868152851515848601908152336000818152600a909452868420955186546001600160a01b031916951694909417855590516001850155516002909301805460ff19169315159390931790925591517febbf08e0c6f72650cd47fd7a287defcf3b872b6c42d317a2a7a86ec62e394ffd9190a2505050565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611af7565b6001600160a01b0316146107775760405162461bcd60e51b815260040161072d90611de7565b600034116114195760405162461bcd60e51b8152602060048201526015602482015274111bdb985d1a5bdb881a5b9cdd59999a58da595b9d605a1b604482015260640161072d565b611423333461190b565b3360009081526007602052604081208054349290611442908490611e9c565b909155505060405134815233907f468bb967b2a541c62b036ff215eec60aeec51236016d6250a405472a36d4edec9060200160405180910390a2565b6000546001600160a01b031633146114a85760405162461bcd60e51b815260040161072d90611e0e565b6001600160a01b03811661150d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072d565b610ab3816118bb565b336000908152600a60205260409020546001600160a01b03166115705760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161072d565b336000818152600a602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fb63279298e3ac7072c4faab7d32ee749119d951fc3d598b92bd9640546a543d19190a2565b6001600160a01b0383166116295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161072d565b6001600160a01b03821661168a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161072d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661174f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161072d565b6001600160a01b0382166117b15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161072d565b6001600160a01b038316600090815260016020526040902054818110156118295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161072d565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290611860908490611e9c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118ac91815260200190565b60405180910390a35b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166119615760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161072d565b80600360008282546119739190611e9c565b90915550506001600160a01b038216600090815260016020526040812080548392906119a0908490611e9c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546119f690611eec565b90600052602060002090601f016020900481019282611a185760008555611a5e565b82601f10611a3157805160ff1916838001178555611a5e565b82800160010185558215611a5e579182015b82811115611a5e578251825591602001919060010190611a43565b50611a6a929150611a6e565b5090565b5b80821115611a6a5760008155600101611a6f565b600082601f830112611a93578081fd5b8135611aa6611aa182611e74565b611e43565b818152846020838601011115611aba578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611ae5578081fd5b8135611af081611f3d565b9392505050565b600060208284031215611b08578081fd5b8151611af081611f3d565b60008060408385031215611b25578081fd5b8235611b3081611f3d565b91506020830135611b4081611f3d565b809150509250929050565b600080600060608486031215611b5f578081fd5b8335611b6a81611f3d565b92506020840135611b7a81611f3d565b929592945050506040919091013590565b60008060408385031215611b9d578182fd5b8235611ba881611f3d565b9150602083013567ffffffffffffffff811115611bc3578182fd5b611bcf85828601611a83565b9150509250929050565b60008060408385031215611beb578182fd5b8235611bf681611f3d565b946020939093013593505050565b600080600060608486031215611c18578283fd5b8335611c2381611f3d565b92506020840135915060408401358015158114611c3e578182fd5b809150509250925092565b600060208284031215611c5a578081fd5b813567ffffffffffffffff811115611c70578182fd5b61101184828501611a83565b600060208284031215611c8d578081fd5b815167ffffffffffffffff811115611ca3578182fd5b8201601f81018413611cb3578182fd5b8051611cc1611aa182611e74565b818152856020838501011115611cd5578384fd5b611ce6826020830160208601611ec0565b95945050505050565b600060208284031215611d00578081fd5b5051919050565b8054600090600181811c9080831680611d2157607f831692505b6020808410821415611d4157634e487b7160e01b86526022600452602486fd5b818015611d555760018114611d6657611d93565b60ff19861689528489019650611d93565b60008881526020902060005b86811015611d8b5781548b820152908501908301611d72565b505084890196505b50505050505092915050565b6000611011611dae8386611d07565b84611d07565b6020815260008251806020840152611dd3816040850160208701611ec0565b601f01601f19169190910160400192915050565b6020808252600d908201526c13dddb995c881a5b9d985b1a59609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6c57611e6c611f27565b604052919050565b600067ffffffffffffffff821115611e8e57611e8e611f27565b50601f01601f191660200190565b60008219821115611ebb57634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015611edb578181015183820152602001611ec3565b838111156118b55750506000910152565b600181811c90821680611f0057607f821691505b60208210811415611f2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab357600080fdfea2646970667358221220979c3dd99cf012b7451adc3169bfb05b22174922d388e1f40fa0dea4abcf5ac864736f6c63430008040033",
          "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x15 PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH32 0x68747470733A2F2F697066732E696F2F697066732F0000000000000000000000 PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH3 0x40 SWAP2 PUSH1 0x6 SWAP2 SWAP1 PUSH3 0x144 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x426C6F636B636861696E20526567697374657265642041766174617200000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x42435241 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH3 0xBC PUSH3 0xB6 PUSH3 0xF0 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xF4 JUMP JUMPDEST DUP2 MLOAD PUSH3 0xD1 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x144 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xE7 SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x144 JUMP JUMPDEST POP POP POP PUSH3 0x227 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x152 SWAP1 PUSH3 0x1EA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x176 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1C1 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x191 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1C1 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1C1 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1C1 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1A4 JUMP JUMPDEST POP PUSH3 0x1CF SWAP3 SWAP2 POP PUSH3 0x1D3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1CF JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1D4 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x221 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F88 DUP1 PUSH3 0x237 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6EC5239F GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0xED88C68E EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xFD4485B9 EQ PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0xCE8AC033 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xDBD18383 EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xDC0D75B0 EQ PUSH2 0x531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85F75293 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x85F75293 EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6EC5239F EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x64635EBC GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x64635EBC EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x68056306 EQ PUSH2 0x334 JUMPI DUP1 PUSH4 0x69DC9FF3 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1587FB27 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x1587FB27 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x235B37B1 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xF53A470 EQ PUSH2 0x222 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0x666 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0x67C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0x703 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C49 JUMP JUMPDEST PUSH2 0x86C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1B4B JUMP JUMPDEST PUSH2 0x923 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x2FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0xA09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0xAB6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0xBFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x36F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0xC9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C49 JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0xDC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44D PUSH2 0x41F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0xDFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0xE0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x4EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0x50C CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0xEB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x52C CALLDATASIZE PUSH1 0x4 PUSH2 0x1C04 JUMP JUMPDEST PUSH2 0x112E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x54C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0x1330 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x56C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x262 PUSH2 0x13D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0x147E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x5E3 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x60F SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x65C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x631 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x65C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x63F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x673 CALLER DUP5 DUP5 PUSH2 0x15C7 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0x6A4 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST SWAP1 POP GT ISZERO PUSH2 0x6EF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP2 MLOAD PUSH2 0x6D9 SWAP3 PUSH1 0x6 SWAP3 SWAP1 SWAP2 ADD PUSH2 0x1D9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x736 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 EXTCODESIZE PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x10DBDB9D1C9858DD081A5B9D985B1A59 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x79A SWAP1 PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0x7CA SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x838 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x9F744F09FC8F1197F6533BA42AAB750CCB8047C53DA4F27410422B2FC872B996 PUSH2 0x81E DUP6 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x82B SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEBF2A104A1845E326777E9EF4E98F6F40343903564FFBCE0586CBCA9CD8926C5 PUSH2 0x81E DUP6 PUSH2 0x67C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x886 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0x8AD SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x8F8 JUMPI CALLER PUSH32 0xBAFDDECBD1DEC1C1AFB76D693F1DE16901F521BDF29A02438E3E6806C0B8D948 PUSH2 0x8DF DUP3 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8EC SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST CALLER PUSH32 0xDD635A4CD84864E37E4479DBFC2EC667ACFA473C83C8422A8AC9D9D07599B01C PUSH2 0x8DF DUP3 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x930 DUP5 DUP5 DUP5 PUSH2 0x16EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0x9C2 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x15C7 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x673 SWAP2 DUP6 SWAP1 PUSH2 0xA04 SWAP1 DUP7 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST PUSH2 0x15C7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x0 SELFBALANCE GT PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B5BDD5B9D081A5B9CDD59999A58DA595B9D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xAB3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST DUP2 EXTCODESIZE PUSH2 0xB21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x10DBDB9D1C9858DD081A5B9D985B1A59 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xB44 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0xB74 SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0xA11242986E21965D8F93D5F585311FC31DBC4EF21C5DC092C793F9EEBBC35977 PUSH2 0x81E DUP6 PUSH2 0xEB4 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x796EB690FA486AF3224F8119F41C63FDF33965351BE20231AAE6F2EDE7233B43 PUSH2 0x81E DUP6 PUSH2 0xEB4 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC77 SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0xCAA SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCD6 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD23 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCF8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD23 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD06 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xD45 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0xD6C SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xD9E JUMPI CALLER PUSH32 0x713B884FA85D657DAB3084902090821951D956678E51A03B2A550A0A39C063F3 PUSH2 0x8DF DUP3 PUSH2 0xEB4 JUMP JUMPDEST CALLER PUSH32 0xED6FBEE54FB754678A908527ED51CF00840E56CCA6B00760C99382DCCF6866F9 PUSH2 0x8DF DUP3 PUSH2 0xEB4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH2 0xDFD PUSH1 0x0 PUSH2 0x18BB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x5E3 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0xE90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0xE9D CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x15C7 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x673 CALLER DUP5 DUP5 PUSH2 0x16EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP2 AND ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP3 AND SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x101E JUMPI PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF61 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF85 SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1019 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC87B56DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xC87B56DD SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1011 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C7C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1068 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x107C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10A0 SWAP2 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST GT ISZERO PUSH2 0x10D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A24D07 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xE89341C SWAP1 PUSH1 0x24 ADD PUSH2 0xFBD JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x10F9 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST SWAP1 POP GT ISZERO PUSH2 0x6EF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP2 MLOAD PUSH2 0x6D9 SWAP3 PUSH1 0x6 SWAP3 SWAP1 SWAP2 ADD PUSH2 0x1D9F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x118A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11AE SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH2 0x129C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1234 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1258 SWAP2 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST GT PUSH2 0x129C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x10985B185B98D9481A5B9CDD59999A58DA595B9D PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE DUP6 ISZERO ISZERO DUP5 DUP7 ADD SWAP1 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP5 MSTORE DUP7 DUP5 KECCAK256 SWAP6 MLOAD DUP7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP6 ADD SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD PUSH32 0xEBBF08E0C6F72650CD47FD7A287DEFCF3B872B6C42D317A2A7A86EC62E394FFD SWAP2 SWAP1 LOG2 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1387 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13AB SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1419 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x111BDB985D1A5BDB881A5B9CDD59999A58DA595B9D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0x1423 CALLER CALLVALUE PUSH2 0x190B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x1442 SWAP1 DUP5 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x468BB967B2A541C62B036FF215EEC60AEEC51236016D6250A405472A36D4EDEC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x150D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0xAB3 DUP2 PUSH2 0x18BB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1570 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x139195081B9BDD081C9959DA5CDD195C9959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xB63279298E3AC7072C4FAAB7D32EE749119D951FC3D598B92BD9640546A543D1 SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1629 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x168A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x174F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x17B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1829 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1860 SWAP1 DUP5 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x18AC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1961 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1973 SWAP2 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x19A0 SWAP1 DUP5 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x19F6 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1A5E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1A31 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1A5E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1A5E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A5E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1A43 JUMP JUMPDEST POP PUSH2 0x1A6A SWAP3 SWAP2 POP PUSH2 0x1A6E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1A6A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1A6F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A93 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AA6 PUSH2 0x1AA1 DUP3 PUSH2 0x1E74 JUMP JUMPDEST PUSH2 0x1E43 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1ABA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AE5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AF0 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B08 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1AF0 DUP2 PUSH2 0x1F3D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B25 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B30 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1B40 DUP2 PUSH2 0x1F3D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B5F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1B6A DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1B7A DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B9D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1BA8 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BC3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BCF DUP6 DUP3 DUP7 ADD PUSH2 0x1A83 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BEB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1BF6 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C18 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1C23 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C3E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C70 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1011 DUP5 DUP3 DUP6 ADD PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C8D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CA3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1CB3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1CC1 PUSH2 0x1AA1 DUP3 PUSH2 0x1E74 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1CD5 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1CE6 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1EC0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D00 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x1D21 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x1D41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1D55 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1D66 JUMPI PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1D8B JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x1D72 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1011 PUSH2 0x1DAE DUP4 DUP7 PUSH2 0x1D07 JUMP JUMPDEST DUP5 PUSH2 0x1D07 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1DD3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1EC0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x13DDDB995C881A5B9D985B1A59 PUSH1 0x9A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1E6C JUMPI PUSH2 0x1E6C PUSH2 0x1F27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E8E JUMPI PUSH2 0x1E8E PUSH2 0x1F27 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1EBB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EDB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1EC3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x18B5 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1F00 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1F21 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 SWAP13 RETURNDATASIZE 0xD9 SWAP13 CREATE SLT 0xB7 GASLIMIT BYTE 0xDC BALANCE PUSH10 0xBFB05B22174922D388E1 DELEGATECALL 0xF LOG0 0xDE LOG4 0xAB 0xCF GAS 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
          "sourceMap": "1267:47:19:-:0;431:5336;1267:47;;431:5336;1267:47;;;;;;;;;;;;;;:::i;:::-;;1551:62;;;;;;;;;;1896:113:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:5;;;867:23:0;877:12;:10;;;:12;;:::i;:::-;867:9;:23::i;:::-;1962:13:5;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1985:17:5;;;;:7;;:17;;;;;:::i;:::-;;1896:113;;431:5336:19;;586:96:14;665:10;;586:96::o;2041:169:0:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;431:5336:19:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;431:5336:19;;;-1:-1:-1;431:5336:19;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:22;93:1;89:12;;;;136;;;157:2;;211:4;203:6;199:17;189:27;;157:2;264;256:6;253:14;233:18;230:38;227:2;;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:2;;69:325;;;:::o;:::-;431:5336:19;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:15317:22",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:22",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "67:431:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "116:24:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "125:5:22"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "132:5:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "118:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "118:20:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "118:20:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "95:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "103:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "91:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "91:17:22"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "110:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "87:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "87:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "80:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "80:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "77:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "149:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "172:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "159:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "159:20:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "153:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "188:64:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "248:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "219:28:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "219:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "203:15:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "203:49:22"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "192:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "268:7:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "277:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "261:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "261:19:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "261:19:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "328:24:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "337:5:22"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "344:5:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "330:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "330:20:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "330:20:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "303:6:22"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "311:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "299:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "299:15:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "316:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "295:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "295:26:22"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "323:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "292:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "292:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "289:2:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "378:7:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "387:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "374:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "374:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "398:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "406:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "394:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "394:17:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "413:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "361:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "361:55:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "361:55:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "440:7:22"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "449:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "436:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "436:16:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "454:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "432:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "432:27:22"
                              },
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "461:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "425:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "425:42:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "425:42:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "476:16:22",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "485:7:22"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "476:5:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "41:6:22",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "49:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "57:5:22",
                        "type": ""
                      }
                    ],
                    "src": "14:484:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "573:187:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "619:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "628:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "636:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "621:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "621:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "621:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "594:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "603:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "590:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "590:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "615:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "586:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "586:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "583:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "654:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "680:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "667:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "667:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "658:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "724:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "699:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "699:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "699:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "739:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "749:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "739:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "539:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "550:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "562:6:22",
                        "type": ""
                      }
                    ],
                    "src": "503:257:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "846:180:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "892:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "901:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "909:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "894:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "894:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "894:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "867:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "876:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "863:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "863:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "888:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "859:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "859:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "856:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "927:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "946:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "940:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "940:16:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "931:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "990:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "965:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "965:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "965:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1005:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1015:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1005:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "812:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "823:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "835:6:22",
                        "type": ""
                      }
                    ],
                    "src": "765:261:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1118:311:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1164:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1173:6:22"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1181:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1166:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1166:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1166:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1139:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1148:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1135:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1135:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1160:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1131:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1131:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1128:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1199:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1225:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1212:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1212:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1203:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1269:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1244:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1244:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1244:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1284:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1294:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1284:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1308:47:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1340:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1351:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1336:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1336:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1323:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1323:32:22"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1312:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "1389:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1364:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1364:33:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1364:33:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1406:17:22",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1416:7:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1406:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1076:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1087:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1099:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1107:6:22",
                        "type": ""
                      }
                    ],
                    "src": "1031:398:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1538:362:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1584:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1593:6:22"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1601:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1586:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1586:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1586:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1559:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1568:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1555:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1555:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1580:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1551:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1551:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1548:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1619:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1645:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1632:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1632:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1623:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1689:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1664:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1664:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1664:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1704:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1714:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1704:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1728:47:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1760:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1771:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1756:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1756:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1743:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1743:32:22"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1732:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "1809:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1784:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1784:33:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1784:33:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1826:17:22",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1836:7:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1826:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1852:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1879:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1890:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1875:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1875:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1862:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1862:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1852:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1488:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1499:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1511:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1519:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1527:6:22",
                        "type": ""
                      }
                    ],
                    "src": "1434:466:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2002:380:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2048:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2057:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2065:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2050:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2050:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2050:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2023:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2032:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2019:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2019:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2044:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2015:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2015:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2012:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2083:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2109:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2096:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2096:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2087:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2153:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2128:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2128:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2128:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2168:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2178:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2168:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2192:46:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2223:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2234:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2219:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2219:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2206:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2206:32:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2196:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2281:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2290:6:22"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2298:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2283:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2283:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2283:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2253:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2261:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2250:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2250:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2247:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2316:60:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2348:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2359:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2344:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2344:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2368:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2326:17:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2326:50:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2316:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1960:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1971:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1983:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1991:6:22",
                        "type": ""
                      }
                    ],
                    "src": "1905:477:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2474:238:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2520:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2529:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2537:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2522:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2522:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2522:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2495:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2504:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2491:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2491:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2516:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2487:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2487:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2484:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2555:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2581:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2568:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2568:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2559:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2625:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2600:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2600:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2600:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2640:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2650:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2640:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2664:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2691:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2702:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2687:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2687:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2674:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2674:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2664:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2432:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2443:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2455:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2463:6:22",
                        "type": ""
                      }
                    ],
                    "src": "2387:325:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2818:403:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2864:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2873:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2881:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2866:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2866:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2866:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2839:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2848:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2835:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2835:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2860:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2831:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2831:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2828:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2899:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2925:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2912:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2912:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2903:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2969:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2944:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2944:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2944:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2984:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2994:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2984:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3008:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3035:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3046:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3031:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3031:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3018:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3018:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3008:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3059:47:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3091:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3102:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3087:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3087:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3074:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3074:32:22"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "3063:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3163:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3172:6:22"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3180:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3165:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3165:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3165:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3128:7:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3151:7:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "3144:6:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3144:15:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3137:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3137:23:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3125:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3125:36:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3118:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3118:44:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3115:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3198:17:22",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "3208:7:22"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3198:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2768:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2779:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2791:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2799:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2807:6:22",
                        "type": ""
                      }
                    ],
                    "src": "2717:504:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3306:262:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3352:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3361:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3369:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3354:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3354:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3354:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3327:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3336:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3323:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3323:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3348:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3319:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3319:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3316:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3387:37:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3414:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3401:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3401:23:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3391:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3467:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3476:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3484:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3469:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3469:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3469:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3439:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3447:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3436:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3436:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3433:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3502:60:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3534:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3545:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3530:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3530:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3554:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "3512:17:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3512:50:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3502:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3272:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3283:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3295:6:22",
                        "type": ""
                      }
                    ],
                    "src": "3226:342:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3664:585:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3710:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3719:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3727:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3712:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3712:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3712:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3685:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3694:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3681:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3681:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3706:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3677:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3677:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3674:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3745:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3765:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3759:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3759:16:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3749:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3818:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3827:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3835:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3820:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3820:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3820:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3790:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3798:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3787:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3787:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3784:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3853:32:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3867:9:22"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3878:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3863:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3863:22:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3857:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3933:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3942:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3950:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3935:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3935:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3935:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3912:2:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3916:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3908:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3908:13:22"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3923:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3904:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3904:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3897:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3897:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3894:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3968:19:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3984:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3978:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3978:9:22"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3972:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3996:62:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4054:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "4025:28:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4025:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "4009:15:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4009:49:22"
                          },
                          "variables": [
                            {
                              "name": "array",
                              "nodeType": "YulTypedName",
                              "src": "4000:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "4074:5:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4081:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4067:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4067:17:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4067:17:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4130:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4139:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4147:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4132:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4132:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4132:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4107:2:22"
                                      },
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4111:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4103:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4103:11:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4116:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4099:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4099:20:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4121:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4096:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4096:33:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4093:2:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4191:2:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4195:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4187:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4187:11:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "4204:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4211:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4200:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4200:14:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4216:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "4165:21:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4165:54:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4165:54:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4228:15:22",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "4238:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4228:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3630:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3641:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3653:6:22",
                        "type": ""
                      }
                    ],
                    "src": "3573:676:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4335:113:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4381:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4390:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4398:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4383:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4383:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4383:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4356:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4365:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4352:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4352:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4377:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4348:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4348:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4345:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4416:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4432:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4426:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4426:16:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4416:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4301:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4312:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4324:6:22",
                        "type": ""
                      }
                    ],
                    "src": "4254:194:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4511:921:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4521:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4544:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "4538:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4538:12:22"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "4525:9:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4559:17:22",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "4573:3:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4563:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4585:11:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4595:1:22",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4589:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4605:28:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4619:2:22"
                              },
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "4623:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "4615:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4615:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "4605:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4642:44:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "4672:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4683:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4668:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4668:18:22"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "4646:18:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4725:31:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4727:27:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "4741:6:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4749:4:22",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "4737:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4737:17:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4727:6:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4705:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4698:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4698:26:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4695:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4765:12:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4775:2:22",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "4769:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4836:115:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "4857:3:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4866:3:22",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4871:10:22",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "4862:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4862:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4850:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4850:33:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4850:33:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4903:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4906:4:22",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4896:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4896:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4896:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "4931:3:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4936:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4924:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4924:17:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4924:17:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4792:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4815:6:22"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4823:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4812:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4812:14:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4789:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4789:38:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4786:2:22"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5001:97:22",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5022:3:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "5031:9:22"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "5046:3:22",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "5042:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5042:8:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "5027:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5027:24:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5015:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5015:37:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5015:37:22"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5065:23:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5076:3:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5081:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5072:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5072:16:22"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "5065:3:22"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4994:104:22",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4999:1:22",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5114:312:22",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5128:51:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "5173:5:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "5143:29:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5143:36:22"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "5132:7:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5192:10:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5201:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "5196:1:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "5269:111:22",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5298:3:22"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5303:1:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5294:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "5294:11:22"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5313:7:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5307:5:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "5307:14:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "5287:6:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5287:35:22"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "5287:35:22"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "5339:27:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "5354:7:22"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "5363:2:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "5350:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5350:16:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "5339:7:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "5226:1:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5229:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "5223:2:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5223:13:22"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "5237:19:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "5239:15:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "5248:1:22"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "5251:2:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "5244:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5244:10:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5239:1:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "5219:3:22",
                                      "statements": []
                                    },
                                    "src": "5215:165:22"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5393:23:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5404:3:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5409:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5400:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5400:16:22"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "5393:3:22"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "5107:319:22",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5112:1:22",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "4967:18:22"
                          },
                          "nodeType": "YulSwitch",
                          "src": "4960:466:22"
                        }
                      ]
                    },
                    "name": "abi_encode_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4488:5:22",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4495:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "4503:3:22",
                        "type": ""
                      }
                    ],
                    "src": "4453:979:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5618:96:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5628:80:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5661:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5695:6:22"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5703:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string_storage",
                                  "nodeType": "YulIdentifier",
                                  "src": "5669:25:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5669:38:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "5635:25:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5635:73:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5628:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5586:3:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5591:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5599:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5610:3:22",
                        "type": ""
                      }
                    ],
                    "src": "5437:277:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5820:102:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5830:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5842:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5853:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5838:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5838:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5830:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5872:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5887:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5903:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5908:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "5899:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5899:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5912:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5895:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5895:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5883:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5883:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5865:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5865:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5865:51:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5789:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5800:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5811:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5719:203:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6056:145:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6066:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6078:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6089:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6074:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6074:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6066:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6108:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6123:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6139:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6144:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6135:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6135:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6148:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6131:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6131:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6119:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6119:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6101:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6101:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6101:51:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6172:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6183:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6168:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6168:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6188:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6161:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6161:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6161:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6017:9:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6028:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6036:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6047:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5927:274:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6357:204:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6367:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6379:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6390:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6375:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6375:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6367:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6409:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6424:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6440:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6445:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6436:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6436:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6449:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6432:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6432:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6420:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6420:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6402:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6402:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6402:51:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6473:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6484:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6469:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6469:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6489:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6462:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6462:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6462:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6516:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6527:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6512:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6512:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6546:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "6539:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6539:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "6532:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6532:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6505:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6505:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6505:50:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_bool__to_t_address_t_uint256_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6310:9:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6321:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6329:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6337:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6348:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6206:355:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6661:92:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6671:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6683:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6694:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6679:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6679:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6671:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6713:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6738:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "6731:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6731:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "6724:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6724:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6706:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6706:41:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6706:41:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6630:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6641:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6652:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6566:187:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6879:262:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6896:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6907:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6889:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6889:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6889:21:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6919:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6939:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6933:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6933:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "6923:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6966:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6977:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6962:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6962:18:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6982:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6955:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6955:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6955:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7024:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7032:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7020:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7020:15:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7041:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7052:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7037:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7037:18:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7057:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6998:21:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6998:66:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6998:66:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7073:62:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7089:9:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "7108:6:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7116:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7104:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7104:15:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7125:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "7121:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7121:7:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7100:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7100:29:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7085:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7085:45:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7132:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7081:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7081:54:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7073:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6848:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6859:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6870:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6758:383:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7320:225:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7337:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7348:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7330:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7330:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7330:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7371:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7382:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7367:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7367:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7387:2:22",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7360:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7360:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7360:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7410:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7421:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7406:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7406:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7426:34:22",
                                "type": "",
                                "value": "ERC20: transfer to the zero addr"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7399:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7399:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7399:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7481:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7492:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7477:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7477:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7497:5:22",
                                "type": "",
                                "value": "ess"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7470:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7470:33:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7470:33:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7512:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7524:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7535:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7520:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7520:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7512:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7297:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7311:4:22",
                        "type": ""
                      }
                    ],
                    "src": "7146:399:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7724:171:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7741:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7752:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7734:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7734:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7734:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7775:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7786:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7771:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7771:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7791:2:22",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7764:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7764:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7764:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7814:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7825:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7810:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7810:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7830:23:22",
                                "type": "",
                                "value": "Donation insufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7803:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7803:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7803:51:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7863:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7875:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7886:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7871:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7871:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7863:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0f644323aed4b038e6fa21323f0938bb4d5e1dec4e13ecb21300672aede5e9e3__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7701:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7715:4:22",
                        "type": ""
                      }
                    ],
                    "src": "7550:345:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8074:168:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8091:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8102:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8084:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8084:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8084:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8125:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8136:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8121:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8121:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8141:2:22",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8114:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8114:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8114:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8164:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8175:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8160:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8160:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8180:20:22",
                                "type": "",
                                "value": "NFT not registered"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8153:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8153:48:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8153:48:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8210:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8222:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8233:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8218:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8218:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8210:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_11963fa535aa651ad290b09609f1675e32e7801e09f5490dd19d007f5a4c029e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8051:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8065:4:22",
                        "type": ""
                      }
                    ],
                    "src": "7900:342:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8421:228:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8438:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8449:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8431:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8431:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8431:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8472:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8483:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8468:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8468:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8488:2:22",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8461:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8461:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8461:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8511:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8522:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8507:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8507:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8527:34:22",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8500:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8500:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8500:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8582:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8593:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8578:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8578:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8598:8:22",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8571:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8571:36:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8571:36:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8616:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8628:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8639:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8624:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8624:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8616:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8398:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8412:4:22",
                        "type": ""
                      }
                    ],
                    "src": "8247:402:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8828:224:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8845:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8856:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8838:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8838:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8838:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8879:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8890:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8875:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8875:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8895:2:22",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8868:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8868:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8868:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8918:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8929:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8914:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8914:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8934:34:22",
                                "type": "",
                                "value": "ERC20: approve to the zero addre"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8907:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8907:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8907:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8989:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9000:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8985:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8985:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9005:4:22",
                                "type": "",
                                "value": "ss"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8978:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8978:32:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8978:32:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9019:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9031:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9042:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9027:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9027:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9019:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8805:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8819:4:22",
                        "type": ""
                      }
                    ],
                    "src": "8654:398:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9231:163:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9248:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9259:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9241:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9241:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9241:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9282:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9293:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9278:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9278:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9298:2:22",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9271:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9271:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9271:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9321:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9332:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9317:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9317:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9337:15:22",
                                "type": "",
                                "value": "Owner invalid"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9310:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9310:43:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9310:43:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9362:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9374:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9385:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9370:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9370:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9362:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2cc86c94083c7bcdf3a3bd7568c6d0cc8e7bdaccd1d6a5f6ab070d265e7e8ca9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9208:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9222:4:22",
                        "type": ""
                      }
                    ],
                    "src": "9057:337:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9573:228:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9590:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9601:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9583:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9583:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9583:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9624:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9635:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9620:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9620:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9640:2:22",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9613:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9613:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9613:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9663:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9674:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9659:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9659:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9679:34:22",
                                "type": "",
                                "value": "ERC20: transfer amount exceeds b"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9652:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9652:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9652:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9734:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9745:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9730:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9730:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9750:8:22",
                                "type": "",
                                "value": "alance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9723:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9723:36:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9723:36:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9768:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9780:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9791:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9776:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9776:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9768:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9550:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9564:4:22",
                        "type": ""
                      }
                    ],
                    "src": "9399:402:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9980:170:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9997:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10008:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9990:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9990:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9990:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10031:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10042:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10027:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10027:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10047:2:22",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10020:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10020:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10020:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10070:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10081:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10066:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10066:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10086:22:22",
                                "type": "",
                                "value": "Balance insufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10059:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10059:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10059:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10118:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10130:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10141:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10126:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10126:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10118:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_473dcbb335213edd6bdd5d90a5408f0e23f6181b661562629a100caa513c3d72__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9957:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9971:4:22",
                        "type": ""
                      }
                    ],
                    "src": "9806:344:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10329:230:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10346:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10357:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10339:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10339:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10339:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10380:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10391:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10376:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10376:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10396:2:22",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10369:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10369:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10369:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10419:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10430:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10415:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10415:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10435:34:22",
                                "type": "",
                                "value": "ERC20: transfer amount exceeds a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10408:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10408:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10408:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10490:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10501:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10486:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10486:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10506:10:22",
                                "type": "",
                                "value": "llowance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10479:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10479:38:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10479:38:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10526:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10538:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10549:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10534:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10534:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10526:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10306:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10320:4:22",
                        "type": ""
                      }
                    ],
                    "src": "10155:404:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10738:182:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10755:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10766:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10748:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10748:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10748:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10789:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10800:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10785:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10785:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10805:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10778:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10778:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10778:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10828:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10839:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10824:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10824:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10844:34:22",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10817:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10817:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10817:62:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10888:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10900:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10911:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10896:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10896:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10888:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10715:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10729:4:22",
                        "type": ""
                      }
                    ],
                    "src": "10564:356:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11099:227:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11116:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11127:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11109:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11109:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11109:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11150:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11161:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11146:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11146:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11166:2:22",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11139:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11139:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11139:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11189:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11200:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11185:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11185:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11205:34:22",
                                "type": "",
                                "value": "ERC20: transfer from the zero ad"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11178:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11178:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11178:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11260:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11271:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11256:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11256:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11276:7:22",
                                "type": "",
                                "value": "dress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11249:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11249:35:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11249:35:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11293:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11305:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11316:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11301:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11301:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11293:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11076:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11090:4:22",
                        "type": ""
                      }
                    ],
                    "src": "10925:401:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11505:169:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11522:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11533:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11515:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11515:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11515:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11556:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11567:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11552:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11552:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11572:2:22",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11545:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11545:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11545:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11595:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11606:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11591:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11591:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11611:21:22",
                                "type": "",
                                "value": "Amount insufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11584:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11584:49:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11584:49:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11642:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11654:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11665:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11650:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11650:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11642:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c8120bba8cf30f585401acb1f0af9b9f74b1bb673071534b9ff63112816bd6be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11482:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11496:4:22",
                        "type": ""
                      }
                    ],
                    "src": "11331:343:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11853:226:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11870:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11881:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11863:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11863:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11863:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11904:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11915:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11900:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11900:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11920:2:22",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11893:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11893:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11893:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11943:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11954:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11939:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11939:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11959:34:22",
                                "type": "",
                                "value": "ERC20: approve from the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11932:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11932:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11932:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12014:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12025:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12010:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12010:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12030:6:22",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12003:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12003:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12003:34:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12046:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12058:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12069:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12054:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12054:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12046:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11830:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11844:4:22",
                        "type": ""
                      }
                    ],
                    "src": "11679:400:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12258:166:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12275:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12286:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12268:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12268:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12268:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12309:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12320:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12305:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12305:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12325:2:22",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12298:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12298:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12298:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12348:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12359:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12344:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12344:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12364:18:22",
                                "type": "",
                                "value": "Contract invalid"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12337:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12337:46:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12337:46:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12392:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12404:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12415:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12400:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12400:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12392:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dab54413c762c0ac2f2be298cc81414e4fee316eb8c9410c9054aec8d682575a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12235:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12249:4:22",
                        "type": ""
                      }
                    ],
                    "src": "12084:340:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12603:227:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12620:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12631:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12613:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12613:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12613:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12654:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12665:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12650:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12650:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12670:2:22",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12643:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12643:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12643:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12693:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12704:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12689:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12689:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12709:34:22",
                                "type": "",
                                "value": "ERC20: decreased allowance below"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12682:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12682:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12682:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12764:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12775:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12760:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12760:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12780:7:22",
                                "type": "",
                                "value": " zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12753:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12753:35:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12753:35:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12797:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12809:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12820:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12805:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12805:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12797:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12580:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12594:4:22",
                        "type": ""
                      }
                    ],
                    "src": "12429:401:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13009:181:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13026:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13037:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13019:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13019:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13019:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13060:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13071:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13056:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13056:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13076:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13049:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13049:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13049:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13099:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13110:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13095:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13095:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13115:33:22",
                                "type": "",
                                "value": "ERC20: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13088:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13088:61:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13088:61:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13158:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13170:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13181:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13166:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13166:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13158:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12986:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13000:4:22",
                        "type": ""
                      }
                    ],
                    "src": "12835:355:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13296:76:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13306:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13318:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13329:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13314:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13314:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13306:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13348:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13359:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13341:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13341:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13341:25:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13265:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13276:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13287:4:22",
                        "type": ""
                      }
                    ],
                    "src": "13195:177:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13474:87:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13484:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13496:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13507:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13492:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13492:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13484:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13526:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "13541:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13549:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13537:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13537:17:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13519:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13519:36:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13519:36:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13443:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13454:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13465:4:22",
                        "type": ""
                      }
                    ],
                    "src": "13377:184:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13611:230:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13621:19:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13637:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13631:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13631:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "13621:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13649:58:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "13671:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "13687:4:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13693:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13683:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13683:13:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13702:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "13698:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13698:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13679:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13679:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13667:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13667:40:22"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "13653:10:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13782:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "13784:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13784:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13784:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13725:10:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13737:18:22",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13722:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13722:34:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13761:10:22"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13773:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13758:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13758:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "13719:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13719:62:22"
                          },
                          "nodeType": "YulIf",
                          "src": "13716:2:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13820:2:22",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "13824:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13813:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13813:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13813:22:22"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "13591:4:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "13600:6:22",
                        "type": ""
                      }
                    ],
                    "src": "13566:275:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13904:129:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13948:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "13950:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13950:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13950:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13920:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13928:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13917:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13917:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "13914:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13979:48:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "13999:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14007:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13995:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13995:15:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14016:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "14012:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14012:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13991:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13991:29:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14022:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13987:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13987:40:22"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "13979:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13884:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "13895:4:22",
                        "type": ""
                      }
                    ],
                    "src": "13846:187:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14094:71:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "14111:4:22"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "14117:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14104:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14104:17:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14104:17:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14130:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "14148:4:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14154:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "14138:9:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14138:21:22"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "14130:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "14077:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "14085:4:22",
                        "type": ""
                      }
                    ],
                    "src": "14038:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14218:181:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14253:115:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "sum",
                                      "nodeType": "YulIdentifier",
                                      "src": "14274:3:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14283:3:22",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14288:10:22",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "14279:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14279:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14267:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14267:33:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14267:33:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14320:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14323:4:22",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14313:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14313:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14313:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "sum",
                                      "nodeType": "YulIdentifier",
                                      "src": "14348:3:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14353:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14341:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14341:17:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14341:17:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "14234:1:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "14241:1:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "14237:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14237:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14231:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14231:13:22"
                          },
                          "nodeType": "YulIf",
                          "src": "14228:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14377:16:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "14388:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "14391:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14384:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14384:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "14377:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "14201:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "14204:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "14210:3:22",
                        "type": ""
                      }
                    ],
                    "src": "14170:229:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14457:205:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14467:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14476:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "14471:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14536:63:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "14561:3:22"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "14566:1:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14557:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14557:11:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "14580:3:22"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "14585:1:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14576:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14576:11:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "14570:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14570:18:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14550:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14550:39:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14550:39:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "14497:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "14500:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "14494:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14494:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "14508:19:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "14510:15:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "14519:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14522:2:22",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "14515:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14515:10:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "14510:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "14490:3:22",
                            "statements": []
                          },
                          "src": "14486:113:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14625:31:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "14638:3:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "14643:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14634:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14634:16:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14652:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14627:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14627:27:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14627:27:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "14614:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "14617:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14611:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14611:13:22"
                          },
                          "nodeType": "YulIf",
                          "src": "14608:2:22"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "14435:3:22",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "14440:3:22",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "14445:6:22",
                        "type": ""
                      }
                    ],
                    "src": "14404:258:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14722:325:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14732:22:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14746:1:22",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "14749:4:22"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "14742:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14742:12:22"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "14732:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14763:38:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "14793:4:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14799:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "14789:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14789:12:22"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "14767:18:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14840:31:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "14842:27:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "14856:6:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14864:4:22",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "14852:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14852:17:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "14842:6:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "14820:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14813:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14813:26:22"
                          },
                          "nodeType": "YulIf",
                          "src": "14810:2:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14930:111:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14951:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14958:3:22",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14963:10:22",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "14954:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14954:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14944:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14944:31:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14944:31:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14995:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14998:4:22",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14988:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14988:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14988:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15023:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15026:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15016:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15016:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15016:15:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "14886:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "14909:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14917:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "14906:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14906:14:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "14883:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14883:38:22"
                          },
                          "nodeType": "YulIf",
                          "src": "14880:2:22"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "14702:4:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "14711:6:22",
                        "type": ""
                      }
                    ],
                    "src": "14667:380:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15084:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15101:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15108:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15113:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "15104:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15104:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15094:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15094:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15094:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15141:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15144:4:22",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15134:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15134:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15134:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15165:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15168:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15158:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15158:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15158:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15052:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15229:86:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15293:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15302:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15305:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15295:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15295:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15295:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "15252:5:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15263:5:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "15278:3:22",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "15283:1:22",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "15274:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15274:11:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15287:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "15270:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15270:19:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "15259:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15259:31:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "15249:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15249:42:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15242:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15242:50:22"
                          },
                          "nodeType": "YulIf",
                          "src": "15239:2:22"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15218:5:22",
                        "type": ""
                      }
                    ],
                    "src": "15184:131:22"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_string(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(value2, value2) }\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_string(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(value0, value0) }\n        copy_memory_to_memory(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_string_storage(value, pos) -> ret\n    {\n        let slotValue := sload(value)\n        let length := ret\n        let _1 := 1\n        length := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        let _2 := 32\n        if eq(outOfPlaceEncoding, lt(length, _2))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(ret, 0x24)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        end := abi_encode_string_storage(value1, abi_encode_string_storage(value0, pos))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bool__to_t_address_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0f644323aed4b038e6fa21323f0938bb4d5e1dec4e13ecb21300672aede5e9e3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Donation insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_11963fa535aa651ad290b09609f1675e32e7801e09f5490dd19d007f5a4c029e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"NFT not registered\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2cc86c94083c7bcdf3a3bd7568c6d0cc8e7bdaccd1d6a5f6ab070d265e7e8ca9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Owner invalid\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_473dcbb335213edd6bdd5d90a5408f0e23f6181b661562629a100caa513c3d72__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Balance insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds a\")\n        mstore(add(headStart, 96), \"llowance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c8120bba8cf30f585401acb1f0af9b9f74b1bb673071534b9ff63112816bd6be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Amount insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_dab54413c762c0ac2f2be298cc81414e4fee316eb8c9410c9054aec8d682575a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Contract invalid\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_string(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(data, ptr)\n        data := keccak256(data, 0x20)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
              "id": 22,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052600436106101c25760003560e01c80636ec5239f116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610551578063ed88c68e14610597578063f2fde38b1461059f578063fd4485b9146105bf57600080fd5b8063a9059cbb146104d1578063ce8ac033146104f1578063dbd1838314610511578063dc0d75b01461053157600080fd5b806385f75293116100d157806385f75293146104045780638da5cb5b1461047457806395d89b411461049c578063a457c2d7146104b157600080fd5b80636ec5239f1461039957806370a08231146103b9578063715018a6146103ef57600080fd5b8063313ce5671161016457806364635ebc1161013e57806364635ebc14610314578063680563061461033457806369dc9ff3146103545780636c0360eb1461038457600080fd5b8063313ce567146102c357806339509351146102df5780633ccfd60b146102ff57600080fd5b80631587fb27116101a05780631587fb271461024257806318160ddd14610264578063235b37b11461028357806323b872dd146102a357600080fd5b806306fdde03146101c7578063095ea7b3146101f25780630f53a47014610222575b600080fd5b3480156101d357600080fd5b506101dc6105d4565b6040516101e99190611db4565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611bd9565b610666565b60405190151581526020016101e9565b34801561022e57600080fd5b506101dc61023d366004611ad4565b61067c565b34801561024e57600080fd5b5061026261025d366004611b8b565b610703565b005b34801561027057600080fd5b506003545b6040519081526020016101e9565b34801561028f57600080fd5b5061026261029e366004611c49565b61086c565b3480156102af57600080fd5b506102126102be366004611b4b565b610923565b3480156102cf57600080fd5b50604051601281526020016101e9565b3480156102eb57600080fd5b506102126102fa366004611bd9565b6109cd565b34801561030b57600080fd5b50610262610a09565b34801561032057600080fd5b5061026261032f366004611b8b565b610ab6565b34801561034057600080fd5b5061026261034f366004611b8b565b610bfc565b34801561036057600080fd5b5061021261036f366004611ad4565b600b6020526000908152604090205460ff1681565b34801561039057600080fd5b506101dc610c9d565b3480156103a557600080fd5b506102626103b4366004611c49565b610d2b565b3480156103c557600080fd5b506102756103d4366004611ad4565b6001600160a01b031660009081526001602052604090205490565b3480156103fb57600080fd5b50610262610dc9565b34801561041057600080fd5b5061044d61041f366004611ad4565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060016101e9565b34801561048057600080fd5b506000546040516001600160a01b0390911681526020016101e9565b3480156104a857600080fd5b506101dc610dff565b3480156104bd57600080fd5b506102126104cc366004611bd9565b610e0e565b3480156104dd57600080fd5b506102126104ec366004611bd9565b610ea7565b3480156104fd57600080fd5b506101dc61050c366004611ad4565b610eb4565b34801561051d57600080fd5b5061026261052c366004611c04565b61112e565b34801561053d57600080fd5b5061026261054c366004611b8b565b611330565b34801561055d57600080fd5b5061027561056c366004611b13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102626113d1565b3480156105ab57600080fd5b506102626105ba366004611ad4565b61147e565b3480156105cb57600080fd5b50610262611516565b6060600480546105e390611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90611eec565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b60006106733384846115c7565b50600192915050565b6001600160a01b0381166000908152600960205260408120805460609291906106a490611eec565b905011156106ef576001600160a01b03821660009081526009602090815260409182902091516106d992600692909101611d9f565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b6000546001600160a01b031633146107365760405162461bcd60e51b815260040161072d90611e0e565b60405180910390fd5b813b6107775760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b0382166000908152600960205260408120805461079a90611eec565b6001600160a01b03851660009081526009602090815260409091208551921594506107ca935091908501906119ea565b508015610838576001600160a01b0383166000818152600b60205260409020805460ff191660011790557f9f744f09fc8f1197f6533ba42aab750ccb8047c53da4f27410422b2fc872b99661081e8561067c565b60405161082b9190611db4565b60405180910390a2505050565b826001600160a01b03167febf2a104a1845e326777e9ef4e98f6f40343903564ffbce0586cbca9cd8926c561081e8561067c565b336000908152600960205260408120805461088690611eec565b3360009081526009602090815260409091208551921594506108ad935091908501906119ea565b5080156108f857337fbafddecbd1dec1c1afb76d693f1de16901f521bdf29a02438e3e6806c0b8d9486108df8261067c565b6040516108ec9190611db4565b60405180910390a25050565b337fdd635a4cd84864e37e4479dbfc2ec667acfa473c83c8422a8ac9d9d07599b01c6108df8261067c565b60006109308484846116eb565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156109b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161072d565b6109c285338584036115c7565b506001949350505050565b3360008181526002602090815260408083206001600160a01b03871684529091528120549091610673918590610a04908690611e9c565b6115c7565b6000546001600160a01b03163314610a335760405162461bcd60e51b815260040161072d90611e0e565b60004711610a795760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d081a5b9cdd59999a58da595b9d606a1b604482015260640161072d565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610ab3573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610ae05760405162461bcd60e51b815260040161072d90611e0e565b813b610b215760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b03821660009081526008602052604081208054610b4490611eec565b6001600160a01b0385166000908152600860209081526040909120855192159450610b74935091908501906119ea565b508015610bc8576001600160a01b0383166000818152600b60205260409020805460ff191660011790557fa11242986e21965d8f93d5f585311fc31dbc4ef21c5dc092c793f9eebbc3597761081e85610eb4565b826001600160a01b03167f796eb690fa486af3224f8119f41c63fdf33965351be20231aae6f2ede7233b4361081e85610eb4565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190611af7565b6001600160a01b031614610b215760405162461bcd60e51b815260040161072d90611de7565b60068054610caa90611eec565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd690611eec565b8015610d235780601f10610cf857610100808354040283529160200191610d23565b820191906000526020600020905b815481529060010190602001808311610d0657829003601f168201915b505050505081565b3360009081526008602052604081208054610d4590611eec565b336000908152600860209081526040909120855192159450610d6c935091908501906119ea565b508015610d9e57337f713b884fa85d657dab3084902090821951d956678e51a03b2a550a0a39c063f36108df82610eb4565b337fed6fbee54fb754678a908527ed51cf00840e56cca6b00760c99382dccf6866f96108df82610eb4565b6000546001600160a01b03163314610df35760405162461bcd60e51b815260040161072d90611e0e565b610dfd60006118bb565b565b6060600580546105e390611eec565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610e905760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161072d565b610e9d33858584036115c7565b5060019392505050565b60006106733384846116eb565b6001600160a01b038181166000908152600a602052604090205460609116156110d6576001600160a01b038083166000908152600a602052604090208054600182015460029092015492169160ff161561101e576040516331a9108f60e11b8152600481018290526001600160a01b038086169190841690636352211e9060240160206040518083038186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190611af7565b6001600160a01b031614156110195760405163c87b56dd60e01b8152600481018290526001600160a01b0383169063c87b56dd906024015b60006040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110119190810190611c7c565b949350505050565b6110d3565b604051627eeac760e11b81526001600160a01b038581166004830152602482018390526000919084169062fdd58e9060440160206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190611cef565b11156110d3576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401610fbd565b50505b6001600160a01b038216600090815260086020526040812080546110f990611eec565b905011156106ef576001600160a01b03821660009081526008602090815260409182902091516106d992600692909101611d9f565b80156111d9576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae9190611af7565b6001600160a01b0316146111d45760405162461bcd60e51b815260040161072d90611de7565b61129c565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611cef565b1161129c5760405162461bcd60e51b815260206004820152601460248201527310985b185b98d9481a5b9cdd59999a58da595b9d60621b604482015260640161072d565b604080516060810182526001600160a01b0385811682526020808301868152851515848601908152336000818152600a909452868420955186546001600160a01b031916951694909417855590516001850155516002909301805460ff19169315159390931790925591517febbf08e0c6f72650cd47fd7a287defcf3b872b6c42d317a2a7a86ec62e394ffd9190a2505050565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611af7565b6001600160a01b0316146107775760405162461bcd60e51b815260040161072d90611de7565b600034116114195760405162461bcd60e51b8152602060048201526015602482015274111bdb985d1a5bdb881a5b9cdd59999a58da595b9d605a1b604482015260640161072d565b611423333461190b565b3360009081526007602052604081208054349290611442908490611e9c565b909155505060405134815233907f468bb967b2a541c62b036ff215eec60aeec51236016d6250a405472a36d4edec9060200160405180910390a2565b6000546001600160a01b031633146114a85760405162461bcd60e51b815260040161072d90611e0e565b6001600160a01b03811661150d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072d565b610ab3816118bb565b336000908152600a60205260409020546001600160a01b03166115705760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161072d565b336000818152600a602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fb63279298e3ac7072c4faab7d32ee749119d951fc3d598b92bd9640546a543d19190a2565b6001600160a01b0383166116295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161072d565b6001600160a01b03821661168a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161072d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661174f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161072d565b6001600160a01b0382166117b15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161072d565b6001600160a01b038316600090815260016020526040902054818110156118295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161072d565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290611860908490611e9c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118ac91815260200190565b60405180910390a35b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166119615760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161072d565b80600360008282546119739190611e9c565b90915550506001600160a01b038216600090815260016020526040812080548392906119a0908490611e9c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546119f690611eec565b90600052602060002090601f016020900481019282611a185760008555611a5e565b82601f10611a3157805160ff1916838001178555611a5e565b82800160010185558215611a5e579182015b82811115611a5e578251825591602001919060010190611a43565b50611a6a929150611a6e565b5090565b5b80821115611a6a5760008155600101611a6f565b600082601f830112611a93578081fd5b8135611aa6611aa182611e74565b611e43565b818152846020838601011115611aba578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611ae5578081fd5b8135611af081611f3d565b9392505050565b600060208284031215611b08578081fd5b8151611af081611f3d565b60008060408385031215611b25578081fd5b8235611b3081611f3d565b91506020830135611b4081611f3d565b809150509250929050565b600080600060608486031215611b5f578081fd5b8335611b6a81611f3d565b92506020840135611b7a81611f3d565b929592945050506040919091013590565b60008060408385031215611b9d578182fd5b8235611ba881611f3d565b9150602083013567ffffffffffffffff811115611bc3578182fd5b611bcf85828601611a83565b9150509250929050565b60008060408385031215611beb578182fd5b8235611bf681611f3d565b946020939093013593505050565b600080600060608486031215611c18578283fd5b8335611c2381611f3d565b92506020840135915060408401358015158114611c3e578182fd5b809150509250925092565b600060208284031215611c5a578081fd5b813567ffffffffffffffff811115611c70578182fd5b61101184828501611a83565b600060208284031215611c8d578081fd5b815167ffffffffffffffff811115611ca3578182fd5b8201601f81018413611cb3578182fd5b8051611cc1611aa182611e74565b818152856020838501011115611cd5578384fd5b611ce6826020830160208601611ec0565b95945050505050565b600060208284031215611d00578081fd5b5051919050565b8054600090600181811c9080831680611d2157607f831692505b6020808410821415611d4157634e487b7160e01b86526022600452602486fd5b818015611d555760018114611d6657611d93565b60ff19861689528489019650611d93565b60008881526020902060005b86811015611d8b5781548b820152908501908301611d72565b505084890196505b50505050505092915050565b6000611011611dae8386611d07565b84611d07565b6020815260008251806020840152611dd3816040850160208701611ec0565b601f01601f19169190910160400192915050565b6020808252600d908201526c13dddb995c881a5b9d985b1a59609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6c57611e6c611f27565b604052919050565b600067ffffffffffffffff821115611e8e57611e8e611f27565b50601f01601f191660200190565b60008219821115611ebb57634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015611edb578181015183820152602001611ec3565b838111156118b55750506000910152565b600181811c90821680611f0057607f821691505b60208210811415611f2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab357600080fdfea2646970667358221220979c3dd99cf012b7451adc3169bfb05b22174922d388e1f40fa0dea4abcf5ac864736f6c63430008040033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6EC5239F GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0xED88C68E EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xFD4485B9 EQ PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0xCE8AC033 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xDBD18383 EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xDC0D75B0 EQ PUSH2 0x531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85F75293 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x85F75293 EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6EC5239F EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x64635EBC GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x64635EBC EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x68056306 EQ PUSH2 0x334 JUMPI DUP1 PUSH4 0x69DC9FF3 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1587FB27 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x1587FB27 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x235B37B1 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xF53A470 EQ PUSH2 0x222 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0x666 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0x67C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0x703 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C49 JUMP JUMPDEST PUSH2 0x86C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1B4B JUMP JUMPDEST PUSH2 0x923 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x2FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0xA09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0xAB6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0xBFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x36F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0xC9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C49 JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0xDC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44D PUSH2 0x41F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0xDFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0xE0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x4EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DC PUSH2 0x50C CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0xEB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x52C CALLDATASIZE PUSH1 0x4 PUSH2 0x1C04 JUMP JUMPDEST PUSH2 0x112E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x54C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8B JUMP JUMPDEST PUSH2 0x1330 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x56C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x262 PUSH2 0x13D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0x147E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x5E3 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x60F SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x65C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x631 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x65C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x63F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x673 CALLER DUP5 DUP5 PUSH2 0x15C7 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0x6A4 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST SWAP1 POP GT ISZERO PUSH2 0x6EF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP2 MLOAD PUSH2 0x6D9 SWAP3 PUSH1 0x6 SWAP3 SWAP1 SWAP2 ADD PUSH2 0x1D9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x736 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 EXTCODESIZE PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x10DBDB9D1C9858DD081A5B9D985B1A59 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x79A SWAP1 PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0x7CA SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x838 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x9F744F09FC8F1197F6533BA42AAB750CCB8047C53DA4F27410422B2FC872B996 PUSH2 0x81E DUP6 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x82B SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEBF2A104A1845E326777E9EF4E98F6F40343903564FFBCE0586CBCA9CD8926C5 PUSH2 0x81E DUP6 PUSH2 0x67C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x886 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0x8AD SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x8F8 JUMPI CALLER PUSH32 0xBAFDDECBD1DEC1C1AFB76D693F1DE16901F521BDF29A02438E3E6806C0B8D948 PUSH2 0x8DF DUP3 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8EC SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST CALLER PUSH32 0xDD635A4CD84864E37E4479DBFC2EC667ACFA473C83C8422A8AC9D9D07599B01C PUSH2 0x8DF DUP3 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x930 DUP5 DUP5 DUP5 PUSH2 0x16EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0x9C2 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x15C7 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x673 SWAP2 DUP6 SWAP1 PUSH2 0xA04 SWAP1 DUP7 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST PUSH2 0x15C7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x0 SELFBALANCE GT PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B5BDD5B9D081A5B9CDD59999A58DA595B9D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xAB3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST DUP2 EXTCODESIZE PUSH2 0xB21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x10DBDB9D1C9858DD081A5B9D985B1A59 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xB44 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0xB74 SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0xA11242986E21965D8F93D5F585311FC31DBC4EF21C5DC092C793F9EEBBC35977 PUSH2 0x81E DUP6 PUSH2 0xEB4 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x796EB690FA486AF3224F8119F41C63FDF33965351BE20231AAE6F2EDE7233B43 PUSH2 0x81E DUP6 PUSH2 0xEB4 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC77 SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0xCAA SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCD6 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD23 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCF8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD23 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD06 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xD45 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP6 MLOAD SWAP3 ISZERO SWAP5 POP PUSH2 0xD6C SWAP4 POP SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH2 0x19EA JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xD9E JUMPI CALLER PUSH32 0x713B884FA85D657DAB3084902090821951D956678E51A03B2A550A0A39C063F3 PUSH2 0x8DF DUP3 PUSH2 0xEB4 JUMP JUMPDEST CALLER PUSH32 0xED6FBEE54FB754678A908527ED51CF00840E56CCA6B00760C99382DCCF6866F9 PUSH2 0x8DF DUP3 PUSH2 0xEB4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH2 0xDFD PUSH1 0x0 PUSH2 0x18BB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x5E3 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0xE90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0xE9D CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x15C7 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x673 CALLER DUP5 DUP5 PUSH2 0x16EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP2 AND ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP3 AND SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x101E JUMPI PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF61 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF85 SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1019 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC87B56DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xC87B56DD SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1011 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C7C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1068 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x107C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10A0 SWAP2 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST GT ISZERO PUSH2 0x10D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A24D07 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xE89341C SWAP1 PUSH1 0x24 ADD PUSH2 0xFBD JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x10F9 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST SWAP1 POP GT ISZERO PUSH2 0x6EF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP2 MLOAD PUSH2 0x6D9 SWAP3 PUSH1 0x6 SWAP3 SWAP1 SWAP2 ADD PUSH2 0x1D9F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x118A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11AE SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH2 0x129C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1234 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1258 SWAP2 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST GT PUSH2 0x129C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x10985B185B98D9481A5B9CDD59999A58DA595B9D PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE DUP6 ISZERO ISZERO DUP5 DUP7 ADD SWAP1 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP5 MSTORE DUP7 DUP5 KECCAK256 SWAP6 MLOAD DUP7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP6 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP6 ADD SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD PUSH32 0xEBBF08E0C6F72650CD47FD7A287DEFCF3B872B6C42D317A2A7A86EC62E394FFD SWAP2 SWAP1 LOG2 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1387 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13AB SWAP2 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1419 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x111BDB985D1A5BDB881A5B9CDD59999A58DA595B9D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0x1423 CALLER CALLVALUE PUSH2 0x190B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x1442 SWAP1 DUP5 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x468BB967B2A541C62B036FF215EEC60AEEC51236016D6250A405472A36D4EDEC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP1 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x150D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH2 0xAB3 DUP2 PUSH2 0x18BB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1570 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x139195081B9BDD081C9959DA5CDD195C9959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xB63279298E3AC7072C4FAAB7D32EE749119D951FC3D598B92BD9640546A543D1 SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1629 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x168A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x174F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x17B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1829 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x72D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1860 SWAP1 DUP5 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x18AC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1961 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x72D JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1973 SWAP2 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x19A0 SWAP1 DUP5 SWAP1 PUSH2 0x1E9C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x19F6 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1A5E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1A31 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1A5E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1A5E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A5E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1A43 JUMP JUMPDEST POP PUSH2 0x1A6A SWAP3 SWAP2 POP PUSH2 0x1A6E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1A6A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1A6F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A93 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AA6 PUSH2 0x1AA1 DUP3 PUSH2 0x1E74 JUMP JUMPDEST PUSH2 0x1E43 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1ABA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AE5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AF0 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B08 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1AF0 DUP2 PUSH2 0x1F3D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B25 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B30 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1B40 DUP2 PUSH2 0x1F3D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B5F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1B6A DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1B7A DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B9D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1BA8 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BC3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BCF DUP6 DUP3 DUP7 ADD PUSH2 0x1A83 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BEB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1BF6 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C18 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1C23 DUP2 PUSH2 0x1F3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C3E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C70 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1011 DUP5 DUP3 DUP6 ADD PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C8D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CA3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1CB3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1CC1 PUSH2 0x1AA1 DUP3 PUSH2 0x1E74 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1CD5 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1CE6 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1EC0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D00 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x1D21 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x1D41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1D55 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1D66 JUMPI PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1D8B JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x1D72 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1011 PUSH2 0x1DAE DUP4 DUP7 PUSH2 0x1D07 JUMP JUMPDEST DUP5 PUSH2 0x1D07 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1DD3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1EC0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x13DDDB995C881A5B9D985B1A59 PUSH1 0x9A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1E6C JUMPI PUSH2 0x1E6C PUSH2 0x1F27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E8E JUMPI PUSH2 0x1E8E PUSH2 0x1F27 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1EBB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EDB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1EC3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x18B5 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1F00 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1F21 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 SWAP13 RETURNDATASIZE 0xD9 SWAP13 CREATE SLT 0xB7 GASLIMIT BYTE 0xDC BALANCE PUSH10 0xBFB05B22174922D388E1 DELEGATECALL 0xF LOG0 0xDE LOG4 0xAB 0xCF GAS 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
          "sourceMap": "431:5336:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98:5;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4171:166;;;;;;;;;;-1:-1:-1;4171:166:5;;;;;:::i;:::-;;:::i;:::-;;;6731:14:22;;6724:22;6706:41;;6694:2;6679:18;4171:166:5;6661:92:22;2560:215:19;;;;;;;;;;-1:-1:-1;2560:215:19;;;;;:::i;:::-;;:::i;4517:435::-;;;;;;;;;;-1:-1:-1;4517:435:19;;;;;:::i;:::-;;:::i;:::-;;3162:106:5;;;;;;;;;;-1:-1:-1;3249:12:5;;3162:106;;;13341:25:22;;;13329:2;13314:18;3162:106:5;13296:76:22;2778:312:19;;;;;;;;;;-1:-1:-1;2778:312:19;;;;;:::i;:::-;;:::i;4804:478:5:-;;;;;;;;;;-1:-1:-1;4804:478:5;;;;;:::i;:::-;;:::i;3011:91::-;;;;;;;;;;-1:-1:-1;3011:91:5;;3093:2;13519:36:22;;13507:2;13492:18;3011:91:5;13474:87:22;5677:212:5;;;;;;;;;;-1:-1:-1;5677:212:5;;;;;:::i;:::-;;:::i;5611:154:19:-;;;;;;;;;;;;;:::i;3654:426::-;;;;;;;;;;-1:-1:-1;3654:426:19;;;;;:::i;:::-;;:::i;4083:431::-;;;;;;;;;;-1:-1:-1;4083:431:19;;;;;:::i;:::-;;:::i;1506:41::-;;;;;;;;;;-1:-1:-1;1506:41:19;;;;;:::i;:::-;;;;;;;;;;;;;;;;1267:47;;;;;;;;;;;;;:::i;2254:303::-;;;;;;;;;;-1:-1:-1;2254:303:19;;;;;:::i;:::-;;:::i;3326:125:5:-;;;;;;;;;;-1:-1:-1;3326:125:5;;;;;:::i;:::-;-1:-1:-1;;;;;3426:18:5;3400:7;3426:18;;;:9;:18;;;;;;;3326:125;1605:92:0;;;;;;;;;;;;;:::i;1456:47:19:-;;;;;;;;;;-1:-1:-1;1456:47:19;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1456:47:19;;;;;;;;;;;;;-1:-1:-1;;;;;6420:32:22;;;6402:51;;6484:2;6469:18;;6462:34;;;;6539:14;6532:22;6512:18;;;6505:50;6390:2;6375:18;1456:47:19;6357:204:22;973:85:0;;;;;;;;;;-1:-1:-1;1019:7:0;1045:6;973:85;;-1:-1:-1;;;;;1045:6:0;;;5865:51:22;;5853:2;5838:18;973:85:0;5820:102:22;2285::5;;;;;;;;;;;;;:::i;6376:405::-;;;;;;;;;;-1:-1:-1;6376:405:5;;;;;:::i;:::-;;:::i;3654:172::-;;;;;;;;;;-1:-1:-1;3654:172:5;;;;;:::i;:::-;;:::i;1616:635:19:-;;;;;;;;;;-1:-1:-1;1616:635:19;;;;;:::i;:::-;;:::i;3093:375::-;;;;;;;;;;-1:-1:-1;3093:375:19;;;;;:::i;:::-;;:::i;4955:440::-;;;;;;;;;;-1:-1:-1;4955:440:19;;;;;:::i;:::-;;:::i;3884:149:5:-;;;;;;;;;;-1:-1:-1;3884:149:5;;;;;:::i;:::-;-1:-1:-1;;;;;3999:18:5;;;3973:7;3999:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3884:149;5398:210:19;;;:::i;1846:189:0:-;;;;;;;;;;-1:-1:-1;1846:189:0;;;;;:::i;:::-;;:::i;3471:180:19:-;;;;;;;;;;;;;:::i;2074:98:5:-;2128:13;2160:5;2153:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98;:::o;4171:166::-;4254:4;4270:39;665:10:14;4293:7:5;4302:6;4270:8;:39::i;:::-;-1:-1:-1;4326:4:5;4171:166;;;;:::o;2560:215:19:-;-1:-1:-1;;;;;2647:17:19;;2675:1;2647:17;;;:8;:17;;;;;2641:31;;2618:13;;2675:1;2647:17;2641:31;;;:::i;:::-;;;:35;2637:135;;;-1:-1:-1;;;;;2723:17:19;;;;;;:8;:17;;;;;;;;;2697:44;;;;2714:7;;2723:17;;2697:44;;:::i;:::-;;;;;;;;;;;;;2683:59;;2560:215;;;:::o;2637:135::-;-1:-1:-1;;2758:9:19;;;;;;;;;-1:-1:-1;2758:9:19;;;2560:215::o;4517:435::-;1019:7:0;1045:6;-1:-1:-1;;;;;1045:6:0;665:10:14;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;;;;;;;;;1034:20:13;;4610:56:19::1;;;::::0;-1:-1:-1;;;4610:56:19;;12286:2:22;4610:56:19::1;::::0;::::1;12268:21:22::0;12325:2;12305:18;;;12298:30;-1:-1:-1;;;12344:18:22;;;12337:46;12400:18;;4610:56:19::1;12258:166:22::0;4610:56:19::1;-1:-1:-1::0;;;;;4694:17:19;::::1;4670:15;4694:17:::0;;;:8:::1;:17;::::0;;;;4688:31;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;;;;;4728:17:19;::::1;4723:1;4728:17:::0;;;:8:::1;:17;::::0;;;;;;;:31;;4688:36;;;-1:-1:-1;4728:31:19::1;::::0;-1:-1:-1;4728:17:19;:31;;::::1;::::0;::::1;:::i;:::-;;4767:10;4763:186;;;-1:-1:-1::0;;;;;4784:18:19;::::1;;::::0;;;:9:::1;:18;::::0;;;;:25;;-1:-1:-1;;4784:25:19::1;4805:4;4784:25;::::0;;4819:52:::1;4851:19;4794:7:::0;4851:10:::1;:19::i;:::-;4819:52;;;;;;:::i;:::-;;;;;;;;1255:1:0;4517:435:19::0;;:::o;4763:186::-:1;4915:7;-1:-1:-1::0;;;;;4892:52:19::1;;4924:19;4935:7;4924:10;:19::i;2778:312::-:0;2869:10;2836:15;2860:20;;;:8;:20;;;;;2854:34;;;;;:::i;:::-;2906:10;2892:1;2897:20;;;:8;:20;;;;;;;;:34;;2854:39;;;-1:-1:-1;2897:34:19;;-1:-1:-1;2897:20:19;:34;;;;;:::i;:::-;;2939:10;2935:152;;;2976:10;2961:50;2988:22;2976:10;2988;:22::i;:::-;2961:50;;;;;;:::i;:::-;;;;;;;;2778:312;;:::o;2935:152::-;3047:10;3032:50;3059:22;3047:10;3059;:22::i;4804:478:5:-;4940:4;4956:36;4966:6;4974:9;4985:6;4956:9;:36::i;:::-;-1:-1:-1;;;;;5030:19:5;;5003:24;5030:19;;;:11;:19;;;;;;;;665:10:14;5030:33:5;;;;;;;;5081:26;;;;5073:79;;;;-1:-1:-1;;;5073:79:5;;10357:2:22;5073:79:5;;;10339:21:22;10396:2;10376:18;;;10369:30;10435:34;10415:18;;;10408:62;-1:-1:-1;;;10486:18:22;;;10479:38;10534:19;;5073:79:5;10329:230:22;5073:79:5;5186:57;5195:6;665:10:14;5236:6:5;5217:16;:25;5186:8;:57::i;:::-;-1:-1:-1;5271:4:5;;4804:478;-1:-1:-1;;;;4804:478:5:o;5677:212::-;665:10:14;5765:4:5;5813:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;5813:34:5;;;;;;;;;;5765:4;;5781:80;;5804:7;;5813:47;;5850:10;;5813:47;:::i;:::-;5781:8;:80::i;5611:154:19:-;1019:7:0;1045:6;-1:-1:-1;;;;;1045:6:0;665:10:14;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;5684:1:19::1;5660:21;:25;5652:57;;;::::0;-1:-1:-1;;;5652:57:19;;11533:2:22;5652:57:19::1;::::0;::::1;11515:21:22::0;11572:2;11552:18;;;11545:30;-1:-1:-1;;;11591:18:22;;;11584:49;11650:18;;5652:57:19::1;11505:169:22::0;5652:57:19::1;1019:7:0::0;1045:6;;5713:48:19::1;::::0;-1:-1:-1;;;;;1045:6:0;;;;5739:21:19::1;5713:48:::0;::::1;;;::::0;5739:21;;5713:48;1019:7:0;5713:48:19;5739:21;1045:6:0;5713:48:19;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;5611:154::o:0;3654:426::-;1019:7:0;1045:6;-1:-1:-1;;;;;1045:6:0;665:10:14;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;1034:20:13;;3745:56:19::1;;;::::0;-1:-1:-1;;;3745:56:19;;12286:2:22;3745:56:19::1;::::0;::::1;12268:21:22::0;12325:2;12305:18;;;12298:30;-1:-1:-1;;;12344:18:22;;;12337:46;12400:18;;3745:56:19::1;12258:166:22::0;3745:56:19::1;-1:-1:-1::0;;;;;3829:16:19;::::1;3805:15;3829:16:::0;;;:7:::1;:16;::::0;;;;3823:30;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;;;;;3862:16:19;::::1;3857:1;3862:16:::0;;;:7:::1;:16;::::0;;;;;;;:29;;3823:35;;;-1:-1:-1;3862:29:19::1;::::0;-1:-1:-1;3862:16:19;:29;;::::1;::::0;::::1;:::i;:::-;;3899:10;3895:182;;;-1:-1:-1::0;;;;;3916:18:19;::::1;;::::0;;;:9:::1;:18;::::0;;;;:25;;-1:-1:-1;;3916:25:19::1;3937:4;3916:25;::::0;;3951:50:::1;3982:18;3926:7:::0;3982:9:::1;:18::i;3895:182::-;4044:7;-1:-1:-1::0;;;;;4022:50:19::1;;4053:18;4063:7;4053:9;:18::i;4083:431::-:0;4207:10;-1:-1:-1;;;;;4179:38:19;4187:7;-1:-1:-1;;;;;4179:22:19;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4179:38:19;;4171:64;;;;-1:-1:-1;;;4171:64:19;;;;;;;:::i;1267:47::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2254:303::-;2342:10;2310:15;2334:19;;;:7;:19;;;;;2328:33;;;;;:::i;:::-;2378:10;2365:1;2370:19;;;:7;:19;;;;;;;;:32;;2328:38;;;-1:-1:-1;2370:32:19;;-1:-1:-1;2370:19:19;:32;;;;;:::i;:::-;;2410:10;2406:148;;;2446:10;2432:48;2458:21;2446:10;2458:9;:21::i;2406:148::-;2515:10;2501:48;2527:21;2515:10;2527:9;:21::i;1605:92:0:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:0;665:10:14;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;2285:102:5:-;2341:13;2373:7;2366:14;;;;;:::i;6376:405::-;665:10:14;6469:4:5;6512:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6512:34:5;;;;;;;;;;6564:35;;;;6556:85;;;;-1:-1:-1;;;6556:85:5;;12631:2:22;6556:85:5;;;12613:21:22;12670:2;12650:18;;;12643:30;12709:34;12689:18;;;12682:62;-1:-1:-1;;;12760:18:22;;;12753:35;12805:19;;6556:85:5;12603:227:22;6556:85:5;6675:67;665:10:14;6698:7:5;6726:15;6707:16;:34;6675:8;:67::i;:::-;-1:-1:-1;6770:4:5;;6376:405;-1:-1:-1;;;6376:405:5:o;3654:172::-;3740:4;3756:42;665:10:14;3780:9:5;3791:6;3756:9;:42::i;1616:635:19:-;-1:-1:-1;;;;;1696:19:19;;;1731:1;1696:19;;;:10;:19;;;;;:23;1673:13;;1696:23;:37;1692:420;;-1:-1:-1;;;;;1754:19:19;;;1740:11;1754:19;;;:10;:19;;;;;:23;;;1800:27;;;1836:28;;;;;1754:23;;;1836:28;;1832:276;;;1876:29;;-1:-1:-1;;;1876:29:19;;;;;13341:25:22;;;-1:-1:-1;;;;;1876:40:19;;;;:20;;;;;;13314:18:22;;1876:29:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1876:40:19;;1872:105;;;1932:38;;-1:-1:-1;;;1932:38:19;;;;;13341:25:22;;;-1:-1:-1;;;;;1932:29:19;;;;;13314:18:22;;1932:38:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1932:38:19;;;;;;;;;;;;:::i;:::-;1925:45;1616:635;-1:-1:-1;;;;1616:635:19:o;1872:105::-;1832:276;;;1998:41;;-1:-1:-1;;;1998:41:19;;-1:-1:-1;;;;;6119:32:22;;;1998:41:19;;;6101:51:22;6168:18;;;6161:34;;;2042:1:19;;1998:23;;;;;;6074:18:22;;1998:41:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:45;1994:109;;;2059:37;;-1:-1:-1;;;2059:37:19;;;;;13341:25:22;;;-1:-1:-1;;;;;2059:28:19;;;;;13314:18:22;;2059:37:19;13296:76:22;1994:109:19;1692:420;;;-1:-1:-1;;;;;2125:16:19;;2152:1;2125:16;;;:7;:16;;;;;2119:30;;;;;:::i;:::-;;;:34;2115:133;;;-1:-1:-1;;;;;2200:16:19;;;;;;:7;:16;;;;;;;;;2174:43;;;;2191:7;;2200:16;;2174:43;;:::i;3093:375::-;3183:8;3179:190;;;3206:29;;-1:-1:-1;;;3206:29:19;;;;;13341:25:22;;;3239:10:19;;-1:-1:-1;;;;;3206:20:19;;;;;13314:18:22;;3206:29:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3206:43:19;;3198:69;;;;-1:-1:-1;;;3198:69:19;;;;;;;:::i;:::-;3179:190;;;3291:44;;-1:-1:-1;;;3291:44:19;;3315:10;3291:44;;;6101:51:22;6168:18;;;6161:34;;;3338:1:19;;-1:-1:-1;;;;;3291:23:19;;;;;6074:18:22;;3291:44:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;3283:81;;;;-1:-1:-1;;;3283:81:19;;10008:2:22;3283:81:19;;;9990:21:22;10047:2;10027:18;;;10020:30;-1:-1:-1;;;10066:18:22;;;10059:50;10126:18;;3283:81:19;9980:170:22;3283:81:19;3397:33;;;;;;;;-1:-1:-1;;;;;3397:33:19;;;;;;;;;;;;;;;;;;;;;3383:10;-1:-1:-1;3372:22:19;;;:10;:22;;;;;;:58;;;;-1:-1:-1;;;;;;3372:58:19;;;;;;;;;;;-1:-1:-1;3372:58:19;;;;;;;;;;-1:-1:-1;;3372:58:19;;;;;;;;;;;3439:25;;;;-1:-1:-1;3439:25:19;3093:375;;;:::o;4955:440::-;5081:10;-1:-1:-1;;;;;5053:38:19;5061:7;-1:-1:-1;;;;;5053:22:19;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5053:38:19;;5045:64;;;;-1:-1:-1;;;5045:64:19;;;;;;;:::i;5398:210::-;5455:1;5443:9;:13;5435:47;;;;-1:-1:-1;;;5435:47:19;;7752:2:22;5435:47:19;;;7734:21:22;7791:2;7771:18;;;7764:30;-1:-1:-1;;;7810:18:22;;;7803:51;7871:18;;5435:47:19;7724:171:22;5435:47:19;5486:34;5498:10;5510:9;5486:11;:34::i;:::-;5534:10;5524:21;;;;:9;:21;;;;;:34;;5549:9;;5524:21;:34;;5549:9;;5524:34;:::i;:::-;;;;-1:-1:-1;;5567:37:19;;5594:9;13341:25:22;;5582:10:19;;5567:37;;13329:2:22;13314:18;5567:37:19;;;;;;;5398:210::o;1846:189:0:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:0;665:10:14;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:0;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:0;;8449:2:22;1926:73:0::1;::::0;::::1;8431:21:22::0;8488:2;8468:18;;;8461:30;8527:34;8507:18;;;8500:62;-1:-1:-1;;;8578:18:22;;;8571:36;8624:19;;1926:73:0::1;8421:228:22::0;1926:73:0::1;2009:19;2019:8;2009:9;:19::i;3471:180:19:-:0;3526:10;3553:1;3515:22;;;:10;:22;;;;;:26;-1:-1:-1;;;;;3515:26:19;3507:71;;;;-1:-1:-1;;;3507:71:19;;8102:2:22;3507:71:19;;;8084:21:22;8141:2;8121:18;;;8114:30;-1:-1:-1;;;8160:18:22;;;8153:48;8218:18;;3507:71:19;8074:168:22;3507:71:19;3600:10;3589:22;;;;:10;:22;;;;;;3582:29;;-1:-1:-1;;;;;;3582:29:19;;;;;;;;;;;;;-1:-1:-1;;3582:29:19;;;3620:27;;;3589:22;3620:27;3471:180::o;9952:370:5:-;-1:-1:-1;;;;;10083:19:5;;10075:68;;;;-1:-1:-1;;;10075:68:5;;11881:2:22;10075:68:5;;;11863:21:22;11920:2;11900:18;;;11893:30;11959:34;11939:18;;;11932:62;-1:-1:-1;;;12010:18:22;;;12003:34;12054:19;;10075:68:5;11853:226:22;10075:68:5;-1:-1:-1;;;;;10161:21:5;;10153:68;;;;-1:-1:-1;;;10153:68:5;;8856:2:22;10153:68:5;;;8838:21:22;8895:2;8875:18;;;8868:30;8934:34;8914:18;;;8907:62;-1:-1:-1;;;8985:18:22;;;8978:32;9027:19;;10153:68:5;8828:224:22;10153:68:5;-1:-1:-1;;;;;10232:18:5;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10283:32;;13341:25:22;;;10283:32:5;;13314:18:22;10283:32:5;;;;;;;9952:370;;;:::o;7255:713::-;-1:-1:-1;;;;;7390:20:5;;7382:70;;;;-1:-1:-1;;;7382:70:5;;11127:2:22;7382:70:5;;;11109:21:22;11166:2;11146:18;;;11139:30;11205:34;11185:18;;;11178:62;-1:-1:-1;;;11256:18:22;;;11249:35;11301:19;;7382:70:5;11099:227:22;7382:70:5;-1:-1:-1;;;;;7470:23:5;;7462:71;;;;-1:-1:-1;;;7462:71:5;;7348:2:22;7462:71:5;;;7330:21:22;7387:2;7367:18;;;7360:30;7426:34;7406:18;;;7399:62;-1:-1:-1;;;7477:18:22;;;7470:33;7520:19;;7462:71:5;7320:225:22;7462:71:5;-1:-1:-1;;;;;7626:17:5;;7602:21;7626:17;;;:9;:17;;;;;;7661:23;;;;7653:74;;;;-1:-1:-1;;;7653:74:5;;9601:2:22;7653:74:5;;;9583:21:22;9640:2;9620:18;;;9613:30;9679:34;9659:18;;;9652:62;-1:-1:-1;;;9730:18:22;;;9723:36;9776:19;;7653:74:5;9573:228:22;7653:74:5;-1:-1:-1;;;;;7761:17:5;;;;;;;:9;:17;;;;;;7781:22;;;7761:42;;7823:20;;;;;;;;:30;;7797:6;;7761:17;7823:30;;7797:6;;7823:30;:::i;:::-;;;;;;;;7886:9;-1:-1:-1;;;;;7869:35:5;7878:6;-1:-1:-1;;;;;7869:35:5;;7897:6;7869:35;;;;13341:25:22;;13329:2;13314:18;;13296:76;7869:35:5;;;;;;;;7915:46;7255:713;;;;:::o;2041:169:0:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;8244:389:5:-;-1:-1:-1;;;;;8327:21:5;;8319:65;;;;-1:-1:-1;;;8319:65:5;;13037:2:22;8319:65:5;;;13019:21:22;13076:2;13056:18;;;13049:30;13115:33;13095:18;;;13088:61;13166:18;;8319:65:5;13009:181:22;8319:65:5;8471:6;8455:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8487:18:5;;;;;;:9;:18;;;;;:28;;8509:6;;8487:18;:28;;8509:6;;8487:28;:::i;:::-;;;;-1:-1:-1;;8530:37:5;;13341:25:22;;;-1:-1:-1;;;;;8530:37:5;;;8547:1;;8530:37;;13329:2:22;13314:18;8530:37:5;;;;;;;2778:312:19;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:484:22;57:5;110:3;103:4;95:6;91:17;87:27;77:2;;132:5;125;118:20;77:2;172:6;159:20;203:49;219:32;248:2;219:32;:::i;:::-;203:49;:::i;:::-;277:2;268:7;261:19;323:3;316:4;311:2;303:6;299:15;295:26;292:35;289:2;;;344:5;337;330:20;289:2;413;406:4;398:6;394:17;387:4;378:7;374:18;361:55;436:16;;;454:4;432:27;425:42;;;;440:7;67:431;-1:-1:-1;;67:431:22:o;503:257::-;562:6;615:2;603:9;594:7;590:23;586:32;583:2;;;636:6;628;621:22;583:2;680:9;667:23;699:31;724:5;699:31;:::i;:::-;749:5;573:187;-1:-1:-1;;;573:187:22:o;765:261::-;835:6;888:2;876:9;867:7;863:23;859:32;856:2;;;909:6;901;894:22;856:2;946:9;940:16;965:31;990:5;965:31;:::i;1031:398::-;1099:6;1107;1160:2;1148:9;1139:7;1135:23;1131:32;1128:2;;;1181:6;1173;1166:22;1128:2;1225:9;1212:23;1244:31;1269:5;1244:31;:::i;:::-;1294:5;-1:-1:-1;1351:2:22;1336:18;;1323:32;1364:33;1323:32;1364:33;:::i;:::-;1416:7;1406:17;;;1118:311;;;;;:::o;1434:466::-;1511:6;1519;1527;1580:2;1568:9;1559:7;1555:23;1551:32;1548:2;;;1601:6;1593;1586:22;1548:2;1645:9;1632:23;1664:31;1689:5;1664:31;:::i;:::-;1714:5;-1:-1:-1;1771:2:22;1756:18;;1743:32;1784:33;1743:32;1784:33;:::i;:::-;1538:362;;1836:7;;-1:-1:-1;;;1890:2:22;1875:18;;;;1862:32;;1538:362::o;1905:477::-;1983:6;1991;2044:2;2032:9;2023:7;2019:23;2015:32;2012:2;;;2065:6;2057;2050:22;2012:2;2109:9;2096:23;2128:31;2153:5;2128:31;:::i;:::-;2178:5;-1:-1:-1;2234:2:22;2219:18;;2206:32;2261:18;2250:30;;2247:2;;;2298:6;2290;2283:22;2247:2;2326:50;2368:7;2359:6;2348:9;2344:22;2326:50;:::i;:::-;2316:60;;;2002:380;;;;;:::o;2387:325::-;2455:6;2463;2516:2;2504:9;2495:7;2491:23;2487:32;2484:2;;;2537:6;2529;2522:22;2484:2;2581:9;2568:23;2600:31;2625:5;2600:31;:::i;:::-;2650:5;2702:2;2687:18;;;;2674:32;;-1:-1:-1;;;2474:238:22:o;2717:504::-;2791:6;2799;2807;2860:2;2848:9;2839:7;2835:23;2831:32;2828:2;;;2881:6;2873;2866:22;2828:2;2925:9;2912:23;2944:31;2969:5;2944:31;:::i;:::-;2994:5;-1:-1:-1;3046:2:22;3031:18;;3018:32;;-1:-1:-1;3102:2:22;3087:18;;3074:32;3144:15;;3137:23;3125:36;;3115:2;;3180:6;3172;3165:22;3115:2;3208:7;3198:17;;;2818:403;;;;;:::o;3226:342::-;3295:6;3348:2;3336:9;3327:7;3323:23;3319:32;3316:2;;;3369:6;3361;3354:22;3316:2;3414:9;3401:23;3447:18;3439:6;3436:30;3433:2;;;3484:6;3476;3469:22;3433:2;3512:50;3554:7;3545:6;3534:9;3530:22;3512:50;:::i;3573:676::-;3653:6;3706:2;3694:9;3685:7;3681:23;3677:32;3674:2;;;3727:6;3719;3712:22;3674:2;3765:9;3759:16;3798:18;3790:6;3787:30;3784:2;;;3835:6;3827;3820:22;3784:2;3863:22;;3916:4;3908:13;;3904:27;-1:-1:-1;3894:2:22;;3950:6;3942;3935:22;3894:2;3984;3978:9;4009:49;4025:32;4054:2;4025:32;:::i;4009:49::-;4081:2;4074:5;4067:17;4121:7;4116:2;4111;4107;4103:11;4099:20;4096:33;4093:2;;;4147:6;4139;4132:22;4093:2;4165:54;4216:2;4211;4204:5;4200:14;4195:2;4191;4187:11;4165:54;:::i;:::-;4238:5;3664:585;-1:-1:-1;;;;;3664:585:22:o;4254:194::-;4324:6;4377:2;4365:9;4356:7;4352:23;4348:32;4345:2;;;4398:6;4390;4383:22;4345:2;-1:-1:-1;4426:16:22;;4335:113;-1:-1:-1;4335:113:22:o;4453:979::-;4538:12;;4503:3;;4595:1;4615:18;;;;4668;;;;4695:2;;4749:4;4741:6;4737:17;4727:27;;4695:2;4775;4823;4815:6;4812:14;4792:18;4789:38;4786:2;;;-1:-1:-1;;;4850:33:22;;4906:4;4903:1;4896:15;4936:4;4857:3;4924:17;4786:2;4967:18;4994:104;;;;5112:1;5107:319;;;;4960:466;;4994:104;-1:-1:-1;;5027:24:22;;5015:37;;5072:16;;;;-1:-1:-1;4994:104:22;;5107:319;14085:4;14104:17;;;14154:4;14138:21;;5201:1;5215:165;5229:6;5226:1;5223:13;5215:165;;;5307:14;;5294:11;;;5287:35;5350:16;;;;5244:10;;5215:165;;;5219:3;;5409:6;5404:3;5400:16;5393:23;;4960:466;;;;;;;4511:921;;;;:::o;5437:277::-;5610:3;5635:73;5669:38;5703:3;5695:6;5669:38;:::i;:::-;5661:6;5635:73;:::i;6758:383::-;6907:2;6896:9;6889:21;6870:4;6939:6;6933:13;6982:6;6977:2;6966:9;6962:18;6955:34;6998:66;7057:6;7052:2;7041:9;7037:18;7032:2;7024:6;7020:15;6998:66;:::i;:::-;7125:2;7104:15;-1:-1:-1;;7100:29:22;7085:45;;;;7132:2;7081:54;;6879:262;-1:-1:-1;;6879:262:22:o;9057:337::-;9259:2;9241:21;;;9298:2;9278:18;;;9271:30;-1:-1:-1;;;9332:2:22;9317:18;;9310:43;9385:2;9370:18;;9231:163::o;10564:356::-;10766:2;10748:21;;;10785:18;;;10778:30;10844:34;10839:2;10824:18;;10817:62;10911:2;10896:18;;10738:182::o;13566:275::-;13637:2;13631:9;13702:2;13683:13;;-1:-1:-1;;13679:27:22;13667:40;;13737:18;13722:34;;13758:22;;;13719:62;13716:2;;;13784:18;;:::i;:::-;13820:2;13813:22;13611:230;;-1:-1:-1;13611:230:22:o;13846:187::-;13895:4;13928:18;13920:6;13917:30;13914:2;;;13950:18;;:::i;:::-;-1:-1:-1;14016:2:22;13995:15;-1:-1:-1;;13991:29:22;14022:4;13987:40;;13904:129::o;14170:229::-;14210:3;14241:1;14237:6;14234:1;14231:13;14228:2;;;-1:-1:-1;;;14267:33:22;;14323:4;14320:1;14313:15;14353:4;14274:3;14341:17;14228:2;-1:-1:-1;14384:9:22;;14218:181::o;14404:258::-;14476:1;14486:113;14500:6;14497:1;14494:13;14486:113;;;14576:11;;;14570:18;14557:11;;;14550:39;14522:2;14515:10;14486:113;;;14617:6;14614:1;14611:13;14608:2;;;-1:-1:-1;;14652:1:22;14634:16;;14627:27;14457:205::o;14667:380::-;14746:1;14742:12;;;;14789;;;14810:2;;14864:4;14856:6;14852:17;14842:27;;14810:2;14917;14909:6;14906:14;14886:18;14883:38;14880:2;;;14963:10;14958:3;14954:20;14951:1;14944:31;14998:4;14995:1;14988:15;15026:4;15023:1;15016:15;14880:2;;14722:325;;;:::o;15052:127::-;15113:10;15108:3;15104:20;15101:1;15094:31;15144:4;15141:1;15134:15;15168:4;15165:1;15158:15;15184:131;-1:-1:-1;;;;;15259:31:22;;15249:42;;15239:2;;15305:1;15302;15295:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1614400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "22559",
            "avatarNFTs(address)": "2987",
            "balanceOf(address)": "1299",
            "baseURI()": "infinite",
            "contracts(address)": "1314",
            "deRegisterNFT()": "49031",
            "decimals()": "223",
            "decreaseAllowance(address,uint256)": "23593",
            "donate()": "infinite",
            "getAvatar(address)": "infinite",
            "getProfile(address)": "infinite",
            "increaseAllowance(address,uint256)": "23596",
            "name()": "infinite",
            "owner()": "1068",
            "registerNFT(address,uint256,bool)": "infinite",
            "renounceOwnership()": "23504",
            "setAvatar(string)": "infinite",
            "setContractAvatar(address,string)": "infinite",
            "setContractProfile(address,string)": "infinite",
            "setOwnableContractAvatar(address,string)": "infinite",
            "setOwnableContractProfile(address,string)": "infinite",
            "setProfile(string)": "infinite",
            "symbol()": "infinite",
            "totalSupply()": "1049",
            "transfer(address,uint256)": "44399",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOwnership(address)": "infinite",
            "withdraw()": "infinite"
          }
        },
        "methodIdentifiers": {
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "avatarNFTs(address)": "85f75293",
          "balanceOf(address)": "70a08231",
          "baseURI()": "6c0360eb",
          "contracts(address)": "69dc9ff3",
          "deRegisterNFT()": "fd4485b9",
          "decimals()": "313ce567",
          "decreaseAllowance(address,uint256)": "a457c2d7",
          "donate()": "ed88c68e",
          "getAvatar(address)": "ce8ac033",
          "getProfile(address)": "0f53a470",
          "increaseAllowance(address,uint256)": "39509351",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "registerNFT(address,uint256,bool)": "dbd18383",
          "renounceOwnership()": "715018a6",
          "setAvatar(string)": "6ec5239f",
          "setContractAvatar(address,string)": "64635ebc",
          "setContractProfile(address,string)": "1587fb27",
          "setOwnableContractAvatar(address,string)": "68056306",
          "setOwnableContractProfile(address,string)": "dc0d75b0",
          "setProfile(string)": "235b37b1",
          "symbol()": "95d89b41",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOwnership(address)": "f2fde38b",
          "withdraw()": "3ccfd60b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"avatarURI\",\"type\":\"string\"}],\"name\":\"AvatarCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"avatarURI\",\"type\":\"string\"}],\"name\":\"AvatarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"avatarURI\",\"type\":\"string\"}],\"name\":\"ContractAvatarCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"avatarURI\",\"type\":\"string\"}],\"name\":\"ContractAvatarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"profileURI\",\"type\":\"string\"}],\"name\":\"ContractProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"profileURI\",\"type\":\"string\"}],\"name\":\"ContractProfileUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NFTDeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NFTRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"profileURI\",\"type\":\"string\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"profileURI\",\"type\":\"string\"}],\"name\":\"ProfileUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ServiceDonated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"avatarNFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deRegisterNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvatar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getProfile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"}],\"name\":\"registerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"avatarHash\",\"type\":\"string\"}],\"name\":\"setAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatarHash\",\"type\":\"string\"}],\"name\":\"setContractAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"profileHash\",\"type\":\"string\"}],\"name\":\"setContractProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatarHash\",\"type\":\"string\"}],\"name\":\"setOwnableContractAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"profileHash\",\"type\":\"string\"}],\"name\":\"setOwnableContractProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"profileHash\",\"type\":\"string\"}],\"name\":\"setProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCRAvatar.sol\":\"BCRAvatar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/BCRAvatar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract BCRAvatar is Ownable, ERC20 {\\n\\tstruct AvatarNFT {\\n\\t\\taddress nft;\\n\\t\\tuint256 tokenId;\\n\\t\\tbool isERC721;\\n\\t}\\n\\n\\tevent AvatarCreated(address indexed account, string avatarURI);\\n\\tevent AvatarUpdated(address indexed account, string avatarURI);\\n\\tevent ProfileCreated(address indexed account, string profileURI);\\n\\tevent ProfileUpdated(address indexed account, string profileURI);\\n\\tevent NFTRegistered(address indexed account);\\n\\tevent NFTDeRegistered(address indexed account);\\n\\tevent ContractAvatarCreated(address indexed account, string avatarURI);\\n\\tevent ContractAvatarUpdated(address indexed account, string avatarURI);\\n\\tevent ContractProfileCreated(address indexed account, string profileURI);\\n\\tevent ContractProfileUpdated(address indexed account, string profileURI);\\n\\tevent ServiceDonated(address indexed account, uint256 amount);\\n\\n\\tstring public baseURI = \\\"https://ipfs.io/ipfs/\\\";\\n\\tmapping(address => uint256) private donations;\\n\\tmapping(address => string) private avatars;\\n\\tmapping(address => string) private profiles;\\n\\tmapping(address => AvatarNFT) public avatarNFTs;\\n\\tmapping(address => bool) public contracts;\\n\\n\\tconstructor() ERC20(\\\"Blockchain Registered Avatar\\\", \\\"BCRA\\\") {}\\n\\n\\tfunction getAvatar(address account) public view returns (string memory) {\\n\\t\\tif (avatarNFTs[account].nft != address(0)) {\\n\\t\\t\\taddress nft = avatarNFTs[account].nft;\\n\\t\\t\\tuint256 tokenId = avatarNFTs[account].tokenId;\\n\\t\\t\\tif (avatarNFTs[account].isERC721) {\\n\\t\\t\\t\\tif (IERC721(nft).ownerOf(tokenId) == account) {\\n\\t\\t\\t\\t\\treturn IERC721Metadata(nft).tokenURI(tokenId);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (IERC1155(nft).balanceOf(account, tokenId) > 0) {\\n\\t\\t\\t\\t\\treturn IERC1155MetadataURI(nft).uri(tokenId);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (bytes(avatars[account]).length > 0) {\\n\\t\\t\\treturn string(abi.encodePacked(baseURI, avatars[account]));\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setAvatar(string memory avatarHash) public {\\n\\t\\tbool notCreated = bytes(avatars[msg.sender]).length == 0;\\n\\t\\tavatars[msg.sender] = avatarHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\temit AvatarCreated(msg.sender, getAvatar(msg.sender));\\n\\t\\t} else {\\n\\t\\t\\temit AvatarUpdated(msg.sender, getAvatar(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getProfile(address account) public view returns (string memory) {\\n\\t\\tif (bytes(profiles[account]).length > 0) {\\n\\t\\t\\treturn string(abi.encodePacked(baseURI, profiles[account]));\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setProfile(string memory profileHash) public {\\n\\t\\tbool notCreated = bytes(profiles[msg.sender]).length == 0;\\n\\t\\tprofiles[msg.sender] = profileHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\temit ProfileCreated(msg.sender, getProfile(msg.sender));\\n\\t\\t} else {\\n\\t\\t\\temit ProfileUpdated(msg.sender, getProfile(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction registerNFT(\\n\\t\\taddress nft,\\n\\t\\tuint256 tokenId,\\n\\t\\tbool isERC721\\n\\t) public {\\n\\t\\tif (isERC721) {\\n\\t\\t\\trequire(IERC721(nft).ownerOf(tokenId) == msg.sender, \\\"Owner invalid\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(IERC1155(nft).balanceOf(msg.sender, tokenId) > 0, \\\"Balance insufficient\\\");\\n\\t\\t}\\n\\t\\tavatarNFTs[msg.sender] = AvatarNFT(nft, tokenId, isERC721);\\n\\t\\temit NFTRegistered(msg.sender);\\n\\t}\\n\\n\\tfunction deRegisterNFT() public {\\n\\t\\trequire(avatarNFTs[msg.sender].nft != address(0), \\\"NFT not registered\\\");\\n\\t\\tdelete avatarNFTs[msg.sender];\\n\\t\\temit NFTDeRegistered(msg.sender);\\n\\t}\\n\\n\\tfunction setContractAvatar(address account, string memory avatarHash) public onlyOwner {\\n\\t\\trequire(Address.isContract(account), \\\"Contract invalid\\\");\\n\\t\\tbool notCreated = bytes(avatars[account]).length == 0;\\n\\t\\tavatars[account] = avatarHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractAvatarCreated(account, getAvatar(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractAvatarUpdated(account, getAvatar(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setOwnableContractAvatar(address account, string memory avatarHash) public {\\n\\t\\trequire(Ownable(account).owner() == msg.sender, \\\"Owner invalid\\\");\\n\\t\\tbool notCreated = bytes(avatars[account]).length == 0;\\n\\t\\tavatars[account] = avatarHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractAvatarCreated(account, getAvatar(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractAvatarUpdated(account, getAvatar(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setContractProfile(address account, string memory profileHash) public onlyOwner {\\n\\t\\trequire(Address.isContract(account), \\\"Contract invalid\\\");\\n\\t\\tbool notCreated = bytes(profiles[account]).length == 0;\\n\\t\\tprofiles[account] = profileHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractProfileCreated(account, getProfile(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractProfileUpdated(account, getProfile(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setOwnableContractProfile(address account, string memory profileHash) public {\\n\\t\\trequire(Ownable(account).owner() == msg.sender, \\\"Owner invalid\\\");\\n\\t\\tbool notCreated = bytes(profiles[account]).length == 0;\\n\\t\\tprofiles[account] = profileHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractProfileCreated(account, getProfile(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractProfileUpdated(account, getProfile(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction donate() public payable {\\n\\t\\trequire(msg.value > 0, \\\"Donation insufficient\\\");\\n\\t\\tsuper._mint(msg.sender, msg.value);\\n\\t\\tdonations[msg.sender] += msg.value;\\n\\t\\temit ServiceDonated(msg.sender, msg.value);\\n\\t}\\n\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\trequire(address(this).balance > 0, \\\"Amount insufficient\\\");\\n\\t\\tpayable(owner()).transfer(address(this).balance);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2d41ec6160d3e8376cd6fb5f9f945183278ade006a9331732cd3b038a00e9456\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 7,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1382,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "_balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1388,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "_allowances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1390,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1392,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "_name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1394,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "_symbol",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3836,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "baseURI",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3840,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "donations",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3844,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "avatars",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_string_storage)"
          },
          {
            "astId": 3848,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "profiles",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_string_storage)"
          },
          {
            "astId": 3853,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "avatarNFTs",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_struct(AvatarNFT)3771_storage)"
          },
          {
            "astId": 3857,
            "contract": "contracts/BCRAvatar.sol:BCRAvatar",
            "label": "contracts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_address,t_struct(AvatarNFT)3771_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct BCRAvatar.AvatarNFT)",
            "numberOfBytes": "32",
            "value": "t_struct(AvatarNFT)3771_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AvatarNFT)3771_storage": {
            "encoding": "inplace",
            "label": "struct BCRAvatar.AvatarNFT",
            "members": [
              {
                "astId": 3766,
                "contract": "contracts/BCRAvatar.sol:BCRAvatar",
                "label": "nft",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 3768,
                "contract": "contracts/BCRAvatar.sol:BCRAvatar",
                "label": "tokenId",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 3770,
                "contract": "contracts/BCRAvatar.sol:BCRAvatar",
                "label": "isERC721",
                "offset": 0,
                "slot": "2",
                "type": "t_bool"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/BCRAvatar.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract BCRAvatar is Ownable, ERC20 {\\n\\tstruct AvatarNFT {\\n\\t\\taddress nft;\\n\\t\\tuint256 tokenId;\\n\\t\\tbool isERC721;\\n\\t}\\n\\n\\tevent AvatarCreated(address indexed account, string avatarURI);\\n\\tevent AvatarUpdated(address indexed account, string avatarURI);\\n\\tevent ProfileCreated(address indexed account, string profileURI);\\n\\tevent ProfileUpdated(address indexed account, string profileURI);\\n\\tevent NFTRegistered(address indexed account);\\n\\tevent NFTDeRegistered(address indexed account);\\n\\tevent ContractAvatarCreated(address indexed account, string avatarURI);\\n\\tevent ContractAvatarUpdated(address indexed account, string avatarURI);\\n\\tevent ContractProfileCreated(address indexed account, string profileURI);\\n\\tevent ContractProfileUpdated(address indexed account, string profileURI);\\n\\tevent ServiceDonated(address indexed account, uint256 amount);\\n\\n\\tstring public baseURI = \\\"https://ipfs.io/ipfs/\\\";\\n\\tmapping(address => uint256) private donations;\\n\\tmapping(address => string) private avatars;\\n\\tmapping(address => string) private profiles;\\n\\tmapping(address => AvatarNFT) public avatarNFTs;\\n\\tmapping(address => bool) public contracts;\\n\\n\\tconstructor() ERC20(\\\"Blockchain Registered Avatar\\\", \\\"BCRA\\\") {}\\n\\n\\tfunction getAvatar(address account) public view returns (string memory) {\\n\\t\\tif (avatarNFTs[account].nft != address(0)) {\\n\\t\\t\\taddress nft = avatarNFTs[account].nft;\\n\\t\\t\\tuint256 tokenId = avatarNFTs[account].tokenId;\\n\\t\\t\\tif (avatarNFTs[account].isERC721) {\\n\\t\\t\\t\\tif (IERC721(nft).ownerOf(tokenId) == account) {\\n\\t\\t\\t\\t\\treturn IERC721Metadata(nft).tokenURI(tokenId);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (IERC1155(nft).balanceOf(account, tokenId) > 0) {\\n\\t\\t\\t\\t\\treturn IERC1155MetadataURI(nft).uri(tokenId);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (bytes(avatars[account]).length > 0) {\\n\\t\\t\\treturn string(abi.encodePacked(baseURI, avatars[account]));\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setAvatar(string memory avatarHash) public {\\n\\t\\tbool notCreated = bytes(avatars[msg.sender]).length == 0;\\n\\t\\tavatars[msg.sender] = avatarHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\temit AvatarCreated(msg.sender, getAvatar(msg.sender));\\n\\t\\t} else {\\n\\t\\t\\temit AvatarUpdated(msg.sender, getAvatar(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getProfile(address account) public view returns (string memory) {\\n\\t\\tif (bytes(profiles[account]).length > 0) {\\n\\t\\t\\treturn string(abi.encodePacked(baseURI, profiles[account]));\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setProfile(string memory profileHash) public {\\n\\t\\tbool notCreated = bytes(profiles[msg.sender]).length == 0;\\n\\t\\tprofiles[msg.sender] = profileHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\temit ProfileCreated(msg.sender, getProfile(msg.sender));\\n\\t\\t} else {\\n\\t\\t\\temit ProfileUpdated(msg.sender, getProfile(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction registerNFT(\\n\\t\\taddress nft,\\n\\t\\tuint256 tokenId,\\n\\t\\tbool isERC721\\n\\t) public {\\n\\t\\tif (isERC721) {\\n\\t\\t\\trequire(IERC721(nft).ownerOf(tokenId) == msg.sender, \\\"Owner invalid\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(IERC1155(nft).balanceOf(msg.sender, tokenId) > 0, \\\"Balance insufficient\\\");\\n\\t\\t}\\n\\t\\tavatarNFTs[msg.sender] = AvatarNFT(nft, tokenId, isERC721);\\n\\t\\temit NFTRegistered(msg.sender);\\n\\t}\\n\\n\\tfunction deRegisterNFT() public {\\n\\t\\trequire(avatarNFTs[msg.sender].nft != address(0), \\\"NFT not registered\\\");\\n\\t\\tdelete avatarNFTs[msg.sender];\\n\\t\\temit NFTDeRegistered(msg.sender);\\n\\t}\\n\\n\\tfunction setContractAvatar(address account, string memory avatarHash) public onlyOwner {\\n\\t\\trequire(Address.isContract(account), \\\"Contract invalid\\\");\\n\\t\\tbool notCreated = bytes(avatars[account]).length == 0;\\n\\t\\tavatars[account] = avatarHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractAvatarCreated(account, getAvatar(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractAvatarUpdated(account, getAvatar(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setOwnableContractAvatar(address account, string memory avatarHash) public {\\n\\t\\trequire(Ownable(account).owner() == msg.sender, \\\"Owner invalid\\\");\\n\\t\\tbool notCreated = bytes(avatars[account]).length == 0;\\n\\t\\tavatars[account] = avatarHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractAvatarCreated(account, getAvatar(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractAvatarUpdated(account, getAvatar(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setContractProfile(address account, string memory profileHash) public onlyOwner {\\n\\t\\trequire(Address.isContract(account), \\\"Contract invalid\\\");\\n\\t\\tbool notCreated = bytes(profiles[account]).length == 0;\\n\\t\\tprofiles[account] = profileHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractProfileCreated(account, getProfile(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractProfileUpdated(account, getProfile(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setOwnableContractProfile(address account, string memory profileHash) public {\\n\\t\\trequire(Ownable(account).owner() == msg.sender, \\\"Owner invalid\\\");\\n\\t\\tbool notCreated = bytes(profiles[account]).length == 0;\\n\\t\\tprofiles[account] = profileHash;\\n\\t\\tif (notCreated) {\\n\\t\\t\\tcontracts[account] = true;\\n\\t\\t\\temit ContractProfileCreated(account, getProfile(account));\\n\\t\\t} else {\\n\\t\\t\\temit ContractProfileUpdated(account, getProfile(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction donate() public payable {\\n\\t\\trequire(msg.value > 0, \\\"Donation insufficient\\\");\\n\\t\\tsuper._mint(msg.sender, msg.value);\\n\\t\\tdonations[msg.sender] += msg.value;\\n\\t\\temit ServiceDonated(msg.sender, msg.value);\\n\\t}\\n\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\trequire(address(this).balance > 0, \\\"Amount insufficient\\\");\\n\\t\\tpayable(owner()).transfer(address(this).balance);\\n\\t}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/MockERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract MockERC721 is ERC721URIStorage {\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter private _tokenIds;\\n\\n\\tconstructor() ERC721(\\\"MockERC721\\\", \\\"MockERC721\\\") {}\\n\\n\\tfunction mint(string memory tokenURI) public returns (uint256) {\\n\\t\\t_tokenIds.increment();\\n\\n\\t\\tuint256 newItemId = _tokenIds.current();\\n\\t\\t_mint(msg.sender, newItemId);\\n\\t\\t_setTokenURI(newItemId, tokenURI);\\n\\n\\t\\treturn newItemId;\\n\\t}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/MockERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\ncontract MockERC1155 is ERC1155, Ownable {\\n\\tconstructor(string memory uri) ERC1155(uri) {\\n\\t\\t_mint(msg.sender, 1, 100, \\\"\\\");\\n\\t\\t_mint(msg.sender, 2, 100, \\\"\\\");\\n\\t}\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "7d7d12117bb9e26bc114ef9441c59ff9",
      "transactionHash": "0xd379d61f1a307d0057e75800694128fd121fee02a24dd572fadcc1fb1cf06af1",
      "args": []
    },
    "decoded": {
      "from": "0x23ABfdBd2535aC77ea60a078707a9e5820b0Fff2",
      "gasPrice": "1000000009",
      "gasLimit": "1896107",
      "to": null,
      "value": "0",
      "nonce": 429,
      "data": "0x60c0604052601560808190527f68747470733a2f2f697066732e696f2f697066732f000000000000000000000060a090815262000040916006919062000144565b503480156200004e57600080fd5b506040518060400160405280601c81526020017f426c6f636b636861696e20526567697374657265642041766174617200000000815250604051806040016040528060048152602001634243524160e01b815250620000bc620000b6620000f060201b60201c565b620000f4565b8151620000d190600490602085019062000144565b508051620000e790600590602084019062000144565b50505062000227565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200015290620001ea565b90600052602060002090601f016020900481019282620001765760008555620001c1565b82601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b5b80821115620001cf5760008155600101620001d4565b600181811c90821680620001ff57607f821691505b602082108114156200022157634e487b7160e01b600052602260045260246000fd5b50919050565b611f8880620002376000396000f3fe6080604052600436106101c25760003560e01c80636ec5239f116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610551578063ed88c68e14610597578063f2fde38b1461059f578063fd4485b9146105bf57600080fd5b8063a9059cbb146104d1578063ce8ac033146104f1578063dbd1838314610511578063dc0d75b01461053157600080fd5b806385f75293116100d157806385f75293146104045780638da5cb5b1461047457806395d89b411461049c578063a457c2d7146104b157600080fd5b80636ec5239f1461039957806370a08231146103b9578063715018a6146103ef57600080fd5b8063313ce5671161016457806364635ebc1161013e57806364635ebc14610314578063680563061461033457806369dc9ff3146103545780636c0360eb1461038457600080fd5b8063313ce567146102c357806339509351146102df5780633ccfd60b146102ff57600080fd5b80631587fb27116101a05780631587fb271461024257806318160ddd14610264578063235b37b11461028357806323b872dd146102a357600080fd5b806306fdde03146101c7578063095ea7b3146101f25780630f53a47014610222575b600080fd5b3480156101d357600080fd5b506101dc6105d4565b6040516101e99190611db4565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611bd9565b610666565b60405190151581526020016101e9565b34801561022e57600080fd5b506101dc61023d366004611ad4565b61067c565b34801561024e57600080fd5b5061026261025d366004611b8b565b610703565b005b34801561027057600080fd5b506003545b6040519081526020016101e9565b34801561028f57600080fd5b5061026261029e366004611c49565b61086c565b3480156102af57600080fd5b506102126102be366004611b4b565b610923565b3480156102cf57600080fd5b50604051601281526020016101e9565b3480156102eb57600080fd5b506102126102fa366004611bd9565b6109cd565b34801561030b57600080fd5b50610262610a09565b34801561032057600080fd5b5061026261032f366004611b8b565b610ab6565b34801561034057600080fd5b5061026261034f366004611b8b565b610bfc565b34801561036057600080fd5b5061021261036f366004611ad4565b600b6020526000908152604090205460ff1681565b34801561039057600080fd5b506101dc610c9d565b3480156103a557600080fd5b506102626103b4366004611c49565b610d2b565b3480156103c557600080fd5b506102756103d4366004611ad4565b6001600160a01b031660009081526001602052604090205490565b3480156103fb57600080fd5b50610262610dc9565b34801561041057600080fd5b5061044d61041f366004611ad4565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060016101e9565b34801561048057600080fd5b506000546040516001600160a01b0390911681526020016101e9565b3480156104a857600080fd5b506101dc610dff565b3480156104bd57600080fd5b506102126104cc366004611bd9565b610e0e565b3480156104dd57600080fd5b506102126104ec366004611bd9565b610ea7565b3480156104fd57600080fd5b506101dc61050c366004611ad4565b610eb4565b34801561051d57600080fd5b5061026261052c366004611c04565b61112e565b34801561053d57600080fd5b5061026261054c366004611b8b565b611330565b34801561055d57600080fd5b5061027561056c366004611b13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102626113d1565b3480156105ab57600080fd5b506102626105ba366004611ad4565b61147e565b3480156105cb57600080fd5b50610262611516565b6060600480546105e390611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90611eec565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b60006106733384846115c7565b50600192915050565b6001600160a01b0381166000908152600960205260408120805460609291906106a490611eec565b905011156106ef576001600160a01b03821660009081526009602090815260409182902091516106d992600692909101611d9f565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b6000546001600160a01b031633146107365760405162461bcd60e51b815260040161072d90611e0e565b60405180910390fd5b813b6107775760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b0382166000908152600960205260408120805461079a90611eec565b6001600160a01b03851660009081526009602090815260409091208551921594506107ca935091908501906119ea565b508015610838576001600160a01b0383166000818152600b60205260409020805460ff191660011790557f9f744f09fc8f1197f6533ba42aab750ccb8047c53da4f27410422b2fc872b99661081e8561067c565b60405161082b9190611db4565b60405180910390a2505050565b826001600160a01b03167febf2a104a1845e326777e9ef4e98f6f40343903564ffbce0586cbca9cd8926c561081e8561067c565b336000908152600960205260408120805461088690611eec565b3360009081526009602090815260409091208551921594506108ad935091908501906119ea565b5080156108f857337fbafddecbd1dec1c1afb76d693f1de16901f521bdf29a02438e3e6806c0b8d9486108df8261067c565b6040516108ec9190611db4565b60405180910390a25050565b337fdd635a4cd84864e37e4479dbfc2ec667acfa473c83c8422a8ac9d9d07599b01c6108df8261067c565b60006109308484846116eb565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156109b55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161072d565b6109c285338584036115c7565b506001949350505050565b3360008181526002602090815260408083206001600160a01b03871684529091528120549091610673918590610a04908690611e9c565b6115c7565b6000546001600160a01b03163314610a335760405162461bcd60e51b815260040161072d90611e0e565b60004711610a795760405162461bcd60e51b8152602060048201526013602482015272105b5bdd5b9d081a5b9cdd59999a58da595b9d606a1b604482015260640161072d565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610ab3573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610ae05760405162461bcd60e51b815260040161072d90611e0e565b813b610b215760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd081a5b9d985b1a5960821b604482015260640161072d565b6001600160a01b03821660009081526008602052604081208054610b4490611eec565b6001600160a01b0385166000908152600860209081526040909120855192159450610b74935091908501906119ea565b508015610bc8576001600160a01b0383166000818152600b60205260409020805460ff191660011790557fa11242986e21965d8f93d5f585311fc31dbc4ef21c5dc092c793f9eebbc3597761081e85610eb4565b826001600160a01b03167f796eb690fa486af3224f8119f41c63fdf33965351be20231aae6f2ede7233b4361081e85610eb4565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190611af7565b6001600160a01b031614610b215760405162461bcd60e51b815260040161072d90611de7565b60068054610caa90611eec565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd690611eec565b8015610d235780601f10610cf857610100808354040283529160200191610d23565b820191906000526020600020905b815481529060010190602001808311610d0657829003601f168201915b505050505081565b3360009081526008602052604081208054610d4590611eec565b336000908152600860209081526040909120855192159450610d6c935091908501906119ea565b508015610d9e57337f713b884fa85d657dab3084902090821951d956678e51a03b2a550a0a39c063f36108df82610eb4565b337fed6fbee54fb754678a908527ed51cf00840e56cca6b00760c99382dccf6866f96108df82610eb4565b6000546001600160a01b03163314610df35760405162461bcd60e51b815260040161072d90611e0e565b610dfd60006118bb565b565b6060600580546105e390611eec565b3360009081526002602090815260408083206001600160a01b038616845290915281205482811015610e905760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161072d565b610e9d33858584036115c7565b5060019392505050565b60006106733384846116eb565b6001600160a01b038181166000908152600a602052604090205460609116156110d6576001600160a01b038083166000908152600a602052604090208054600182015460029092015492169160ff161561101e576040516331a9108f60e11b8152600481018290526001600160a01b038086169190841690636352211e9060240160206040518083038186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190611af7565b6001600160a01b031614156110195760405163c87b56dd60e01b8152600481018290526001600160a01b0383169063c87b56dd906024015b60006040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110119190810190611c7c565b949350505050565b6110d3565b604051627eeac760e11b81526001600160a01b038581166004830152602482018390526000919084169062fdd58e9060440160206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190611cef565b11156110d3576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401610fbd565b50505b6001600160a01b038216600090815260086020526040812080546110f990611eec565b905011156106ef576001600160a01b03821660009081526008602090815260409182902091516106d992600692909101611d9f565b80156111d9576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae9190611af7565b6001600160a01b0316146111d45760405162461bcd60e51b815260040161072d90611de7565b61129c565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611cef565b1161129c5760405162461bcd60e51b815260206004820152601460248201527310985b185b98d9481a5b9cdd59999a58da595b9d60621b604482015260640161072d565b604080516060810182526001600160a01b0385811682526020808301868152851515848601908152336000818152600a909452868420955186546001600160a01b031916951694909417855590516001850155516002909301805460ff19169315159390931790925591517febbf08e0c6f72650cd47fd7a287defcf3b872b6c42d317a2a7a86ec62e394ffd9190a2505050565b336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611af7565b6001600160a01b0316146107775760405162461bcd60e51b815260040161072d90611de7565b600034116114195760405162461bcd60e51b8152602060048201526015602482015274111bdb985d1a5bdb881a5b9cdd59999a58da595b9d605a1b604482015260640161072d565b611423333461190b565b3360009081526007602052604081208054349290611442908490611e9c565b909155505060405134815233907f468bb967b2a541c62b036ff215eec60aeec51236016d6250a405472a36d4edec9060200160405180910390a2565b6000546001600160a01b031633146114a85760405162461bcd60e51b815260040161072d90611e0e565b6001600160a01b03811661150d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072d565b610ab3816118bb565b336000908152600a60205260409020546001600160a01b03166115705760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161072d565b336000818152600a602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fb63279298e3ac7072c4faab7d32ee749119d951fc3d598b92bd9640546a543d19190a2565b6001600160a01b0383166116295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161072d565b6001600160a01b03821661168a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161072d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661174f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161072d565b6001600160a01b0382166117b15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161072d565b6001600160a01b038316600090815260016020526040902054818110156118295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161072d565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290611860908490611e9c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118ac91815260200190565b60405180910390a35b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166119615760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161072d565b80600360008282546119739190611e9c565b90915550506001600160a01b038216600090815260016020526040812080548392906119a0908490611e9c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546119f690611eec565b90600052602060002090601f016020900481019282611a185760008555611a5e565b82601f10611a3157805160ff1916838001178555611a5e565b82800160010185558215611a5e579182015b82811115611a5e578251825591602001919060010190611a43565b50611a6a929150611a6e565b5090565b5b80821115611a6a5760008155600101611a6f565b600082601f830112611a93578081fd5b8135611aa6611aa182611e74565b611e43565b818152846020838601011115611aba578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611ae5578081fd5b8135611af081611f3d565b9392505050565b600060208284031215611b08578081fd5b8151611af081611f3d565b60008060408385031215611b25578081fd5b8235611b3081611f3d565b91506020830135611b4081611f3d565b809150509250929050565b600080600060608486031215611b5f578081fd5b8335611b6a81611f3d565b92506020840135611b7a81611f3d565b929592945050506040919091013590565b60008060408385031215611b9d578182fd5b8235611ba881611f3d565b9150602083013567ffffffffffffffff811115611bc3578182fd5b611bcf85828601611a83565b9150509250929050565b60008060408385031215611beb578182fd5b8235611bf681611f3d565b946020939093013593505050565b600080600060608486031215611c18578283fd5b8335611c2381611f3d565b92506020840135915060408401358015158114611c3e578182fd5b809150509250925092565b600060208284031215611c5a578081fd5b813567ffffffffffffffff811115611c70578182fd5b61101184828501611a83565b600060208284031215611c8d578081fd5b815167ffffffffffffffff811115611ca3578182fd5b8201601f81018413611cb3578182fd5b8051611cc1611aa182611e74565b818152856020838501011115611cd5578384fd5b611ce6826020830160208601611ec0565b95945050505050565b600060208284031215611d00578081fd5b5051919050565b8054600090600181811c9080831680611d2157607f831692505b6020808410821415611d4157634e487b7160e01b86526022600452602486fd5b818015611d555760018114611d6657611d93565b60ff19861689528489019650611d93565b60008881526020902060005b86811015611d8b5781548b820152908501908301611d72565b505084890196505b50505050505092915050565b6000611011611dae8386611d07565b84611d07565b6020815260008251806020840152611dd3816040850160208701611ec0565b601f01601f19169190910160400192915050565b6020808252600d908201526c13dddb995c881a5b9d985b1a59609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6c57611e6c611f27565b604052919050565b600067ffffffffffffffff821115611e8e57611e8e611f27565b50601f01601f191660200190565b60008219821115611ebb57634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015611edb578181015183820152602001611ec3565b838111156118b55750506000910152565b600181811c90821680611f0057607f821691505b60208210811415611f2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab357600080fdfea2646970667358221220979c3dd99cf012b7451adc3169bfb05b22174922d388e1f40fa0dea4abcf5ac864736f6c63430008040033",
      "r": "0x429a7afad4ab042eef9be252dbcda853be2f3259742ad73ac80c1e05839b3f37",
      "s": "0x0cc232fe9e4ade39b8e21aff850c8a3318f2c97631845df554ea90e0aef27fbe",
      "v": 43,
      "chainId": 4
    }
  }
}